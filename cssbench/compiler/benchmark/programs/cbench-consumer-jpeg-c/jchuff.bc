; ModuleID = 'jchuff.bc'
source_filename = "jchuff.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.jpeg_compress_struct = type { ptr, ptr, ptr, i32, i32, ptr, i32, i32, i32, i32, double, i32, i32, i32, ptr, [4 x ptr], [4 x ptr], [4 x ptr], [16 x i8], [16 x i8], [16 x i8], i32, ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x ptr], i32, i32, i32, [10 x i32], i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.jpeg_memory_mgr = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.c_derived_tbl = type { [256 x i32], [256 x i8] }
%struct.jpeg_error_mgr = type { ptr, ptr, ptr, ptr, ptr, i32, %union.anon, i32, i64, ptr, i32, ptr, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.huff_entropy_encoder = type { %struct.jpeg_entropy_encoder, %struct.savable_state, i32, i32, [4 x ptr], [4 x ptr], [4 x ptr], [4 x ptr] }
%struct.jpeg_entropy_encoder = type { ptr, ptr, ptr }
%struct.savable_state = type { i64, i32, [4 x i32] }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr }
%struct.working_state = type { ptr, i64, %struct.savable_state, ptr }
%struct.jpeg_destination_mgr = type { ptr, i64, ptr, ptr, ptr }

@jpeg_natural_order = external constant [0 x i32], align 4

; Function Attrs: noinline nounwind uwtable
define dso_local void @jpeg_make_c_derived_tbl(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [257 x i8], align 16
  %14 = alloca [257 x i32], align 16
  %15 = alloca i32, align 4
  store ptr %0, ptr %4, align 8
  store ptr %1, ptr %5, align 8
  store ptr %2, ptr %6, align 8
  %16 = load ptr, ptr %6, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = icmp eq ptr %17, null
  br i1 %18, label %19, label %28

19:                                               ; preds = %3
  %20 = load ptr, ptr %4, align 8
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %20, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %22, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %4, align 8
  %26 = call ptr %24(ptr noundef %25, i32 noundef 1, i64 noundef 1280)
  %27 = load ptr, ptr %6, align 8
  store ptr %26, ptr %27, align 8
  br label %28

28:                                               ; preds = %19, %3
  %29 = load ptr, ptr %6, align 8
  %30 = load ptr, ptr %29, align 8
  store ptr %30, ptr %7, align 8
  store i32 0, ptr %8, align 4
  store i32 1, ptr %10, align 4
  br label %31

31:                                               ; preds = %56, %28
  %32 = load i32, ptr %10, align 4
  %33 = icmp sle i32 %32, 16
  br i1 %33, label %34, label %59

34:                                               ; preds = %31
  store i32 1, ptr %9, align 4
  br label %35

35:                                               ; preds = %52, %34
  %36 = load i32, ptr %9, align 4
  %37 = load ptr, ptr %5, align 8
  %38 = getelementptr inbounds %struct.JHUFF_TBL, ptr %37, i32 0, i32 0
  %39 = load i32, ptr %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [17 x i8], ptr %38, i64 0, i64 %40
  %42 = load i8, ptr %41, align 1
  %43 = zext i8 %42 to i32
  %44 = icmp sle i32 %36, %43
  br i1 %44, label %45, label %55

45:                                               ; preds = %35
  %46 = load i32, ptr %10, align 4
  %47 = trunc i32 %46 to i8
  %48 = load i32, ptr %8, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, ptr %8, align 4
  %50 = sext i32 %48 to i64
  %51 = getelementptr inbounds [257 x i8], ptr %13, i64 0, i64 %50
  store i8 %47, ptr %51, align 1
  br label %52

52:                                               ; preds = %45
  %53 = load i32, ptr %9, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, ptr %9, align 4
  br label %35, !llvm.loop !6

55:                                               ; preds = %35
  br label %56

56:                                               ; preds = %55
  %57 = load i32, ptr %10, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, ptr %10, align 4
  br label %31, !llvm.loop !8

59:                                               ; preds = %31
  %60 = load i32, ptr %8, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [257 x i8], ptr %13, i64 0, i64 %61
  store i8 0, ptr %62, align 1
  %63 = load i32, ptr %8, align 4
  store i32 %63, ptr %11, align 4
  store i32 0, ptr %15, align 4
  %64 = getelementptr inbounds [257 x i8], ptr %13, i64 0, i64 0
  %65 = load i8, ptr %64, align 16
  %66 = sext i8 %65 to i32
  store i32 %66, ptr %12, align 4
  store i32 0, ptr %8, align 4
  br label %67

67:                                               ; preds = %90, %59
  %68 = load i32, ptr %8, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [257 x i8], ptr %13, i64 0, i64 %69
  %71 = load i8, ptr %70, align 1
  %72 = icmp ne i8 %71, 0
  br i1 %72, label %73, label %95

73:                                               ; preds = %67
  br label %74

74:                                               ; preds = %82, %73
  %75 = load i32, ptr %8, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [257 x i8], ptr %13, i64 0, i64 %76
  %78 = load i8, ptr %77, align 1
  %79 = sext i8 %78 to i32
  %80 = load i32, ptr %12, align 4
  %81 = icmp eq i32 %79, %80
  br i1 %81, label %82, label %90

82:                                               ; preds = %74
  %83 = load i32, ptr %15, align 4
  %84 = load i32, ptr %8, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, ptr %8, align 4
  %86 = sext i32 %84 to i64
  %87 = getelementptr inbounds [257 x i32], ptr %14, i64 0, i64 %86
  store i32 %83, ptr %87, align 4
  %88 = load i32, ptr %15, align 4
  %89 = add i32 %88, 1
  store i32 %89, ptr %15, align 4
  br label %74, !llvm.loop !9

90:                                               ; preds = %74
  %91 = load i32, ptr %15, align 4
  %92 = shl i32 %91, 1
  store i32 %92, ptr %15, align 4
  %93 = load i32, ptr %12, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, ptr %12, align 4
  br label %67, !llvm.loop !10

95:                                               ; preds = %67
  %96 = load ptr, ptr %7, align 8
  %97 = getelementptr inbounds %struct.c_derived_tbl, ptr %96, i32 0, i32 1
  %98 = getelementptr inbounds [256 x i8], ptr %97, i64 0, i64 0
  call void @llvm.memset.p0.i64(ptr align 4 %98, i8 0, i64 256, i1 false)
  store i32 0, ptr %8, align 4
  br label %99

99:                                               ; preds = %132, %95
  %100 = load i32, ptr %8, align 4
  %101 = load i32, ptr %11, align 4
  %102 = icmp slt i32 %100, %101
  br i1 %102, label %103, label %135

103:                                              ; preds = %99
  %104 = load i32, ptr %8, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds [257 x i32], ptr %14, i64 0, i64 %105
  %107 = load i32, ptr %106, align 4
  %108 = load ptr, ptr %7, align 8
  %109 = getelementptr inbounds %struct.c_derived_tbl, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %5, align 8
  %111 = getelementptr inbounds %struct.JHUFF_TBL, ptr %110, i32 0, i32 1
  %112 = load i32, ptr %8, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds [256 x i8], ptr %111, i64 0, i64 %113
  %115 = load i8, ptr %114, align 1
  %116 = zext i8 %115 to i64
  %117 = getelementptr inbounds [256 x i32], ptr %109, i64 0, i64 %116
  store i32 %107, ptr %117, align 4
  %118 = load i32, ptr %8, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [257 x i8], ptr %13, i64 0, i64 %119
  %121 = load i8, ptr %120, align 1
  %122 = load ptr, ptr %7, align 8
  %123 = getelementptr inbounds %struct.c_derived_tbl, ptr %122, i32 0, i32 1
  %124 = load ptr, ptr %5, align 8
  %125 = getelementptr inbounds %struct.JHUFF_TBL, ptr %124, i32 0, i32 1
  %126 = load i32, ptr %8, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [256 x i8], ptr %125, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1
  %130 = zext i8 %129 to i64
  %131 = getelementptr inbounds [256 x i8], ptr %123, i64 0, i64 %130
  store i8 %121, ptr %131, align 1
  br label %132

132:                                              ; preds = %103
  %133 = load i32, ptr %8, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, ptr %8, align 4
  br label %99, !llvm.loop !11

135:                                              ; preds = %99
  ret void
}

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @jpeg_gen_optimal_table(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca [33 x i8], align 16
  %8 = alloca [257 x i32], align 16
  %9 = alloca [257 x i32], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  store ptr %0, ptr %4, align 8
  store ptr %1, ptr %5, align 8
  store ptr %2, ptr %6, align 8
  %16 = getelementptr inbounds [33 x i8], ptr %7, i64 0, i64 0
  call void @llvm.memset.p0.i64(ptr align 16 %16, i8 0, i64 33, i1 false)
  %17 = getelementptr inbounds [257 x i32], ptr %8, i64 0, i64 0
  call void @llvm.memset.p0.i64(ptr align 16 %17, i8 0, i64 1028, i1 false)
  store i32 0, ptr %13, align 4
  br label %18

18:                                               ; preds = %25, %3
  %19 = load i32, ptr %13, align 4
  %20 = icmp slt i32 %19, 257
  br i1 %20, label %21, label %28

21:                                               ; preds = %18
  %22 = load i32, ptr %13, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [257 x i32], ptr %9, i64 0, i64 %23
  store i32 -1, ptr %24, align 4
  br label %25

25:                                               ; preds = %21
  %26 = load i32, ptr %13, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, ptr %13, align 4
  br label %18, !llvm.loop !12

28:                                               ; preds = %18
  %29 = load ptr, ptr %6, align 8
  %30 = getelementptr inbounds i64, ptr %29, i64 256
  store i64 1, ptr %30, align 8
  br label %31

31:                                               ; preds = %162, %28
  store i32 -1, ptr %10, align 4
  store i64 1000000000, ptr %15, align 8
  store i32 0, ptr %13, align 4
  br label %32

32:                                               ; preds = %58, %31
  %33 = load i32, ptr %13, align 4
  %34 = icmp sle i32 %33, 256
  br i1 %34, label %35, label %61

35:                                               ; preds = %32
  %36 = load ptr, ptr %6, align 8
  %37 = load i32, ptr %13, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i64, ptr %36, i64 %38
  %40 = load i64, ptr %39, align 8
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %42, label %57

42:                                               ; preds = %35
  %43 = load ptr, ptr %6, align 8
  %44 = load i32, ptr %13, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i64, ptr %43, i64 %45
  %47 = load i64, ptr %46, align 8
  %48 = load i64, ptr %15, align 8
  %49 = icmp sle i64 %47, %48
  br i1 %49, label %50, label %57

50:                                               ; preds = %42
  %51 = load ptr, ptr %6, align 8
  %52 = load i32, ptr %13, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i64, ptr %51, i64 %53
  %55 = load i64, ptr %54, align 8
  store i64 %55, ptr %15, align 8
  %56 = load i32, ptr %13, align 4
  store i32 %56, ptr %10, align 4
  br label %57

57:                                               ; preds = %50, %42, %35
  br label %58

58:                                               ; preds = %57
  %59 = load i32, ptr %13, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, ptr %13, align 4
  br label %32, !llvm.loop !13

61:                                               ; preds = %32
  store i32 -1, ptr %11, align 4
  store i64 1000000000, ptr %15, align 8
  store i32 0, ptr %13, align 4
  br label %62

62:                                               ; preds = %92, %61
  %63 = load i32, ptr %13, align 4
  %64 = icmp sle i32 %63, 256
  br i1 %64, label %65, label %95

65:                                               ; preds = %62
  %66 = load ptr, ptr %6, align 8
  %67 = load i32, ptr %13, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i64, ptr %66, i64 %68
  %70 = load i64, ptr %69, align 8
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %91

72:                                               ; preds = %65
  %73 = load ptr, ptr %6, align 8
  %74 = load i32, ptr %13, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i64, ptr %73, i64 %75
  %77 = load i64, ptr %76, align 8
  %78 = load i64, ptr %15, align 8
  %79 = icmp sle i64 %77, %78
  br i1 %79, label %80, label %91

80:                                               ; preds = %72
  %81 = load i32, ptr %13, align 4
  %82 = load i32, ptr %10, align 4
  %83 = icmp ne i32 %81, %82
  br i1 %83, label %84, label %91

84:                                               ; preds = %80
  %85 = load ptr, ptr %6, align 8
  %86 = load i32, ptr %13, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i64, ptr %85, i64 %87
  %89 = load i64, ptr %88, align 8
  store i64 %89, ptr %15, align 8
  %90 = load i32, ptr %13, align 4
  store i32 %90, ptr %11, align 4
  br label %91

91:                                               ; preds = %84, %80, %72, %65
  br label %92

92:                                               ; preds = %91
  %93 = load i32, ptr %13, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, ptr %13, align 4
  br label %62, !llvm.loop !14

95:                                               ; preds = %62
  %96 = load i32, ptr %11, align 4
  %97 = icmp slt i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  br label %163

99:                                               ; preds = %95
  %100 = load ptr, ptr %6, align 8
  %101 = load i32, ptr %11, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i64, ptr %100, i64 %102
  %104 = load i64, ptr %103, align 8
  %105 = load ptr, ptr %6, align 8
  %106 = load i32, ptr %10, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i64, ptr %105, i64 %107
  %109 = load i64, ptr %108, align 8
  %110 = add nsw i64 %109, %104
  store i64 %110, ptr %108, align 8
  %111 = load ptr, ptr %6, align 8
  %112 = load i32, ptr %11, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i64, ptr %111, i64 %113
  store i64 0, ptr %114, align 8
  %115 = load i32, ptr %10, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds [257 x i32], ptr %8, i64 0, i64 %116
  %118 = load i32, ptr %117, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, ptr %117, align 4
  br label %120

120:                                              ; preds = %126, %99
  %121 = load i32, ptr %10, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [257 x i32], ptr %9, i64 0, i64 %122
  %124 = load i32, ptr %123, align 4
  %125 = icmp sge i32 %124, 0
  br i1 %125, label %126, label %136

126:                                              ; preds = %120
  %127 = load i32, ptr %10, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds [257 x i32], ptr %9, i64 0, i64 %128
  %130 = load i32, ptr %129, align 4
  store i32 %130, ptr %10, align 4
  %131 = load i32, ptr %10, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds [257 x i32], ptr %8, i64 0, i64 %132
  %134 = load i32, ptr %133, align 4
  %135 = add nsw i32 %134, 1
  store i32 %135, ptr %133, align 4
  br label %120, !llvm.loop !15

136:                                              ; preds = %120
  %137 = load i32, ptr %11, align 4
  %138 = load i32, ptr %10, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [257 x i32], ptr %9, i64 0, i64 %139
  store i32 %137, ptr %140, align 4
  %141 = load i32, ptr %11, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [257 x i32], ptr %8, i64 0, i64 %142
  %144 = load i32, ptr %143, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, ptr %143, align 4
  br label %146

146:                                              ; preds = %152, %136
  %147 = load i32, ptr %11, align 4
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds [257 x i32], ptr %9, i64 0, i64 %148
  %150 = load i32, ptr %149, align 4
  %151 = icmp sge i32 %150, 0
  br i1 %151, label %152, label %162

152:                                              ; preds = %146
  %153 = load i32, ptr %11, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds [257 x i32], ptr %9, i64 0, i64 %154
  %156 = load i32, ptr %155, align 4
  store i32 %156, ptr %11, align 4
  %157 = load i32, ptr %11, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds [257 x i32], ptr %8, i64 0, i64 %158
  %160 = load i32, ptr %159, align 4
  %161 = add nsw i32 %160, 1
  store i32 %161, ptr %159, align 4
  br label %146, !llvm.loop !16

162:                                              ; preds = %146
  br label %31

163:                                              ; preds = %98
  store i32 0, ptr %13, align 4
  br label %164

164:                                              ; preds = %200, %163
  %165 = load i32, ptr %13, align 4
  %166 = icmp sle i32 %165, 256
  br i1 %166, label %167, label %203

167:                                              ; preds = %164
  %168 = load i32, ptr %13, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds [257 x i32], ptr %8, i64 0, i64 %169
  %171 = load i32, ptr %170, align 4
  %172 = icmp ne i32 %171, 0
  br i1 %172, label %173, label %199

173:                                              ; preds = %167
  %174 = load i32, ptr %13, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [257 x i32], ptr %8, i64 0, i64 %175
  %177 = load i32, ptr %176, align 4
  %178 = icmp sgt i32 %177, 32
  br i1 %178, label %179, label %190

179:                                              ; preds = %173
  %180 = load ptr, ptr %4, align 8
  %181 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %180, i32 0, i32 0
  %182 = load ptr, ptr %181, align 8
  %183 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %182, i32 0, i32 5
  store i32 38, ptr %183, align 8
  %184 = load ptr, ptr %4, align 8
  %185 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %184, i32 0, i32 0
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = load ptr, ptr %4, align 8
  call void %188(ptr noundef %189)
  br label %190

190:                                              ; preds = %179, %173
  %191 = load i32, ptr %13, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds [257 x i32], ptr %8, i64 0, i64 %192
  %194 = load i32, ptr %193, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds [33 x i8], ptr %7, i64 0, i64 %195
  %197 = load i8, ptr %196, align 1
  %198 = add i8 %197, 1
  store i8 %198, ptr %196, align 1
  br label %199

199:                                              ; preds = %190, %167
  br label %200

200:                                              ; preds = %199
  %201 = load i32, ptr %13, align 4
  %202 = add nsw i32 %201, 1
  store i32 %202, ptr %13, align 4
  br label %164, !llvm.loop !17

203:                                              ; preds = %164
  store i32 32, ptr %13, align 4
  br label %204

204:                                              ; preds = %256, %203
  %205 = load i32, ptr %13, align 4
  %206 = icmp sgt i32 %205, 16
  br i1 %206, label %207, label %259

207:                                              ; preds = %204
  br label %208

208:                                              ; preds = %228, %207
  %209 = load i32, ptr %13, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds [33 x i8], ptr %7, i64 0, i64 %210
  %212 = load i8, ptr %211, align 1
  %213 = zext i8 %212 to i32
  %214 = icmp sgt i32 %213, 0
  br i1 %214, label %215, label %255

215:                                              ; preds = %208
  %216 = load i32, ptr %13, align 4
  %217 = sub nsw i32 %216, 2
  store i32 %217, ptr %14, align 4
  br label %218

218:                                              ; preds = %225, %215
  %219 = load i32, ptr %14, align 4
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds [33 x i8], ptr %7, i64 0, i64 %220
  %222 = load i8, ptr %221, align 1
  %223 = zext i8 %222 to i32
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %228

225:                                              ; preds = %218
  %226 = load i32, ptr %14, align 4
  %227 = add nsw i32 %226, -1
  store i32 %227, ptr %14, align 4
  br label %218, !llvm.loop !18

228:                                              ; preds = %218
  %229 = load i32, ptr %13, align 4
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds [33 x i8], ptr %7, i64 0, i64 %230
  %232 = load i8, ptr %231, align 1
  %233 = zext i8 %232 to i32
  %234 = sub nsw i32 %233, 2
  %235 = trunc i32 %234 to i8
  store i8 %235, ptr %231, align 1
  %236 = load i32, ptr %13, align 4
  %237 = sub nsw i32 %236, 1
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds [33 x i8], ptr %7, i64 0, i64 %238
  %240 = load i8, ptr %239, align 1
  %241 = add i8 %240, 1
  store i8 %241, ptr %239, align 1
  %242 = load i32, ptr %14, align 4
  %243 = add nsw i32 %242, 1
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds [33 x i8], ptr %7, i64 0, i64 %244
  %246 = load i8, ptr %245, align 1
  %247 = zext i8 %246 to i32
  %248 = add nsw i32 %247, 2
  %249 = trunc i32 %248 to i8
  store i8 %249, ptr %245, align 1
  %250 = load i32, ptr %14, align 4
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds [33 x i8], ptr %7, i64 0, i64 %251
  %253 = load i8, ptr %252, align 1
  %254 = add i8 %253, -1
  store i8 %254, ptr %252, align 1
  br label %208, !llvm.loop !19

255:                                              ; preds = %208
  br label %256

256:                                              ; preds = %255
  %257 = load i32, ptr %13, align 4
  %258 = add nsw i32 %257, -1
  store i32 %258, ptr %13, align 4
  br label %204, !llvm.loop !20

259:                                              ; preds = %204
  br label %260

260:                                              ; preds = %267, %259
  %261 = load i32, ptr %13, align 4
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds [33 x i8], ptr %7, i64 0, i64 %262
  %264 = load i8, ptr %263, align 1
  %265 = zext i8 %264 to i32
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %270

267:                                              ; preds = %260
  %268 = load i32, ptr %13, align 4
  %269 = add nsw i32 %268, -1
  store i32 %269, ptr %13, align 4
  br label %260, !llvm.loop !21

270:                                              ; preds = %260
  %271 = load i32, ptr %13, align 4
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds [33 x i8], ptr %7, i64 0, i64 %272
  %274 = load i8, ptr %273, align 1
  %275 = add i8 %274, -1
  store i8 %275, ptr %273, align 1
  %276 = load ptr, ptr %5, align 8
  %277 = getelementptr inbounds %struct.JHUFF_TBL, ptr %276, i32 0, i32 0
  %278 = getelementptr inbounds [17 x i8], ptr %277, i64 0, i64 0
  %279 = getelementptr inbounds [33 x i8], ptr %7, i64 0, i64 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %278, ptr align 16 %279, i64 17, i1 false)
  store i32 0, ptr %12, align 4
  store i32 1, ptr %13, align 4
  br label %280

280:                                              ; preds = %309, %270
  %281 = load i32, ptr %13, align 4
  %282 = icmp sle i32 %281, 32
  br i1 %282, label %283, label %312

283:                                              ; preds = %280
  store i32 0, ptr %14, align 4
  br label %284

284:                                              ; preds = %305, %283
  %285 = load i32, ptr %14, align 4
  %286 = icmp sle i32 %285, 255
  br i1 %286, label %287, label %308

287:                                              ; preds = %284
  %288 = load i32, ptr %14, align 4
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds [257 x i32], ptr %8, i64 0, i64 %289
  %291 = load i32, ptr %290, align 4
  %292 = load i32, ptr %13, align 4
  %293 = icmp eq i32 %291, %292
  br i1 %293, label %294, label %304

294:                                              ; preds = %287
  %295 = load i32, ptr %14, align 4
  %296 = trunc i32 %295 to i8
  %297 = load ptr, ptr %5, align 8
  %298 = getelementptr inbounds %struct.JHUFF_TBL, ptr %297, i32 0, i32 1
  %299 = load i32, ptr %12, align 4
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds [256 x i8], ptr %298, i64 0, i64 %300
  store i8 %296, ptr %301, align 1
  %302 = load i32, ptr %12, align 4
  %303 = add nsw i32 %302, 1
  store i32 %303, ptr %12, align 4
  br label %304

304:                                              ; preds = %294, %287
  br label %305

305:                                              ; preds = %304
  %306 = load i32, ptr %14, align 4
  %307 = add nsw i32 %306, 1
  store i32 %307, ptr %14, align 4
  br label %284, !llvm.loop !22

308:                                              ; preds = %284
  br label %309

309:                                              ; preds = %308
  %310 = load i32, ptr %13, align 4
  %311 = add nsw i32 %310, 1
  store i32 %311, ptr %13, align 4
  br label %280, !llvm.loop !23

312:                                              ; preds = %280
  %313 = load ptr, ptr %5, align 8
  %314 = getelementptr inbounds %struct.JHUFF_TBL, ptr %313, i32 0, i32 2
  store i32 0, ptr %314, align 4
  ret void
}

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @jinit_huff_encoder(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca i32, align 4
  store ptr %0, ptr %2, align 8
  %5 = load ptr, ptr %2, align 8
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %5, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %2, align 8
  %11 = call ptr %9(ptr noundef %10, i32 noundef 1, i64 noundef 192)
  store ptr %11, ptr %3, align 8
  %12 = load ptr, ptr %3, align 8
  %13 = load ptr, ptr %2, align 8
  %14 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %13, i32 0, i32 59
  store ptr %12, ptr %14, align 8
  %15 = load ptr, ptr %3, align 8
  %16 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.jpeg_entropy_encoder, ptr %16, i32 0, i32 0
  store ptr @start_pass_huff, ptr %17, align 8
  store i32 0, ptr %4, align 4
  br label %18

18:                                               ; preds = %42, %1
  %19 = load i32, ptr %4, align 4
  %20 = icmp slt i32 %19, 4
  br i1 %20, label %21, label %45

21:                                               ; preds = %18
  %22 = load ptr, ptr %3, align 8
  %23 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %22, i32 0, i32 5
  %24 = load i32, ptr %4, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [4 x ptr], ptr %23, i64 0, i64 %25
  store ptr null, ptr %26, align 8
  %27 = load ptr, ptr %3, align 8
  %28 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %27, i32 0, i32 4
  %29 = load i32, ptr %4, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [4 x ptr], ptr %28, i64 0, i64 %30
  store ptr null, ptr %31, align 8
  %32 = load ptr, ptr %3, align 8
  %33 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %32, i32 0, i32 7
  %34 = load i32, ptr %4, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [4 x ptr], ptr %33, i64 0, i64 %35
  store ptr null, ptr %36, align 8
  %37 = load ptr, ptr %3, align 8
  %38 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %37, i32 0, i32 6
  %39 = load i32, ptr %4, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x ptr], ptr %38, i64 0, i64 %40
  store ptr null, ptr %41, align 8
  br label %42

42:                                               ; preds = %21
  %43 = load i32, ptr %4, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, ptr %4, align 4
  br label %18, !llvm.loop !24

45:                                               ; preds = %18
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @start_pass_huff(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  store ptr %0, ptr %3, align 8
  store i32 %1, ptr %4, align 4
  %10 = load ptr, ptr %3, align 8
  %11 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %10, i32 0, i32 59
  %12 = load ptr, ptr %11, align 8
  store ptr %12, ptr %5, align 8
  %13 = load i32, ptr %4, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %2
  %16 = load ptr, ptr %5, align 8
  %17 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %16, i32 0, i32 0
  %18 = getelementptr inbounds %struct.jpeg_entropy_encoder, ptr %17, i32 0, i32 1
  store ptr @encode_mcu_gather, ptr %18, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %19, i32 0, i32 0
  %21 = getelementptr inbounds %struct.jpeg_entropy_encoder, ptr %20, i32 0, i32 2
  store ptr @finish_pass_gather, ptr %21, align 8
  br label %29

22:                                               ; preds = %2
  %23 = load ptr, ptr %5, align 8
  %24 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %23, i32 0, i32 0
  %25 = getelementptr inbounds %struct.jpeg_entropy_encoder, ptr %24, i32 0, i32 1
  store ptr @encode_mcu_huff, ptr %25, align 8
  %26 = load ptr, ptr %5, align 8
  %27 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %26, i32 0, i32 0
  %28 = getelementptr inbounds %struct.jpeg_entropy_encoder, ptr %27, i32 0, i32 2
  store ptr @finish_pass_huff, ptr %28, align 8
  br label %29

29:                                               ; preds = %22, %15
  store i32 0, ptr %6, align 4
  br label %30

30:                                               ; preds = %206, %29
  %31 = load i32, ptr %6, align 4
  %32 = load ptr, ptr %3, align 8
  %33 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %32, i32 0, i32 41
  %34 = load i32, ptr %33, align 4
  %35 = icmp slt i32 %31, %34
  br i1 %35, label %36, label %209

36:                                               ; preds = %30
  %37 = load ptr, ptr %3, align 8
  %38 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %37, i32 0, i32 42
  %39 = load i32, ptr %6, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x ptr], ptr %38, i64 0, i64 %40
  %42 = load ptr, ptr %41, align 8
  store ptr %42, ptr %9, align 8
  %43 = load ptr, ptr %9, align 8
  %44 = getelementptr inbounds %struct.jpeg_component_info, ptr %43, i32 0, i32 5
  %45 = load i32, ptr %44, align 4
  store i32 %45, ptr %7, align 4
  %46 = load ptr, ptr %9, align 8
  %47 = getelementptr inbounds %struct.jpeg_component_info, ptr %46, i32 0, i32 6
  %48 = load i32, ptr %47, align 8
  store i32 %48, ptr %8, align 4
  %49 = load i32, ptr %7, align 4
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %65, label %51

51:                                               ; preds = %36
  %52 = load i32, ptr %7, align 4
  %53 = icmp sge i32 %52, 4
  br i1 %53, label %65, label %54

54:                                               ; preds = %51
  %55 = load ptr, ptr %3, align 8
  %56 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %55, i32 0, i32 16
  %57 = load i32, ptr %7, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [4 x ptr], ptr %56, i64 0, i64 %58
  %60 = load ptr, ptr %59, align 8
  %61 = icmp eq ptr %60, null
  br i1 %61, label %62, label %82

62:                                               ; preds = %54
  %63 = load i32, ptr %4, align 4
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %82, label %65

65:                                               ; preds = %62, %51, %36
  %66 = load ptr, ptr %3, align 8
  %67 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %68, i32 0, i32 5
  store i32 49, ptr %69, align 8
  %70 = load i32, ptr %7, align 4
  %71 = load ptr, ptr %3, align 8
  %72 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %71, i32 0, i32 0
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %73, i32 0, i32 6
  %75 = getelementptr inbounds [8 x i32], ptr %74, i64 0, i64 0
  store i32 %70, ptr %75, align 4
  %76 = load ptr, ptr %3, align 8
  %77 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = load ptr, ptr %3, align 8
  call void %80(ptr noundef %81)
  br label %82

82:                                               ; preds = %65, %62, %54
  %83 = load i32, ptr %8, align 4
  %84 = icmp slt i32 %83, 0
  br i1 %84, label %99, label %85

85:                                               ; preds = %82
  %86 = load i32, ptr %8, align 4
  %87 = icmp sge i32 %86, 4
  br i1 %87, label %99, label %88

88:                                               ; preds = %85
  %89 = load ptr, ptr %3, align 8
  %90 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %89, i32 0, i32 17
  %91 = load i32, ptr %8, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [4 x ptr], ptr %90, i64 0, i64 %92
  %94 = load ptr, ptr %93, align 8
  %95 = icmp eq ptr %94, null
  br i1 %95, label %96, label %116

96:                                               ; preds = %88
  %97 = load i32, ptr %4, align 4
  %98 = icmp ne i32 %97, 0
  br i1 %98, label %116, label %99

99:                                               ; preds = %96, %85, %82
  %100 = load ptr, ptr %3, align 8
  %101 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %102, i32 0, i32 5
  store i32 49, ptr %103, align 8
  %104 = load i32, ptr %8, align 4
  %105 = load ptr, ptr %3, align 8
  %106 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %105, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %107, i32 0, i32 6
  %109 = getelementptr inbounds [8 x i32], ptr %108, i64 0, i64 0
  store i32 %104, ptr %109, align 4
  %110 = load ptr, ptr %3, align 8
  %111 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %112, i32 0, i32 0
  %114 = load ptr, ptr %113, align 8
  %115 = load ptr, ptr %3, align 8
  call void %114(ptr noundef %115)
  br label %116

116:                                              ; preds = %99, %96, %88
  %117 = load i32, ptr %4, align 4
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %119, label %174

119:                                              ; preds = %116
  %120 = load ptr, ptr %5, align 8
  %121 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %120, i32 0, i32 6
  %122 = load i32, ptr %7, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [4 x ptr], ptr %121, i64 0, i64 %123
  %125 = load ptr, ptr %124, align 8
  %126 = icmp eq ptr %125, null
  br i1 %126, label %127, label %140

127:                                              ; preds = %119
  %128 = load ptr, ptr %3, align 8
  %129 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %128, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %130, i32 0, i32 0
  %132 = load ptr, ptr %131, align 8
  %133 = load ptr, ptr %3, align 8
  %134 = call ptr %132(ptr noundef %133, i32 noundef 1, i64 noundef 2056)
  %135 = load ptr, ptr %5, align 8
  %136 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %135, i32 0, i32 6
  %137 = load i32, ptr %7, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [4 x ptr], ptr %136, i64 0, i64 %138
  store ptr %134, ptr %139, align 8
  br label %140

140:                                              ; preds = %127, %119
  %141 = load ptr, ptr %5, align 8
  %142 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %141, i32 0, i32 6
  %143 = load i32, ptr %7, align 4
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds [4 x ptr], ptr %142, i64 0, i64 %144
  %146 = load ptr, ptr %145, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %146, i8 0, i64 2056, i1 false)
  %147 = load ptr, ptr %5, align 8
  %148 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %147, i32 0, i32 7
  %149 = load i32, ptr %8, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [4 x ptr], ptr %148, i64 0, i64 %150
  %152 = load ptr, ptr %151, align 8
  %153 = icmp eq ptr %152, null
  br i1 %153, label %154, label %167

154:                                              ; preds = %140
  %155 = load ptr, ptr %3, align 8
  %156 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %155, i32 0, i32 1
  %157 = load ptr, ptr %156, align 8
  %158 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %157, i32 0, i32 0
  %159 = load ptr, ptr %158, align 8
  %160 = load ptr, ptr %3, align 8
  %161 = call ptr %159(ptr noundef %160, i32 noundef 1, i64 noundef 2056)
  %162 = load ptr, ptr %5, align 8
  %163 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %162, i32 0, i32 7
  %164 = load i32, ptr %8, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [4 x ptr], ptr %163, i64 0, i64 %165
  store ptr %161, ptr %166, align 8
  br label %167

167:                                              ; preds = %154, %140
  %168 = load ptr, ptr %5, align 8
  %169 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %168, i32 0, i32 7
  %170 = load i32, ptr %8, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds [4 x ptr], ptr %169, i64 0, i64 %171
  %173 = load ptr, ptr %172, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %173, i8 0, i64 2056, i1 false)
  br label %199

174:                                              ; preds = %116
  %175 = load ptr, ptr %3, align 8
  %176 = load ptr, ptr %3, align 8
  %177 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %176, i32 0, i32 16
  %178 = load i32, ptr %7, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [4 x ptr], ptr %177, i64 0, i64 %179
  %181 = load ptr, ptr %180, align 8
  %182 = load ptr, ptr %5, align 8
  %183 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %182, i32 0, i32 4
  %184 = load i32, ptr %7, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds [4 x ptr], ptr %183, i64 0, i64 %185
  call void @jpeg_make_c_derived_tbl(ptr noundef %175, ptr noundef %181, ptr noundef %186)
  %187 = load ptr, ptr %3, align 8
  %188 = load ptr, ptr %3, align 8
  %189 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %188, i32 0, i32 17
  %190 = load i32, ptr %8, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds [4 x ptr], ptr %189, i64 0, i64 %191
  %193 = load ptr, ptr %192, align 8
  %194 = load ptr, ptr %5, align 8
  %195 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %194, i32 0, i32 5
  %196 = load i32, ptr %8, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds [4 x ptr], ptr %195, i64 0, i64 %197
  call void @jpeg_make_c_derived_tbl(ptr noundef %187, ptr noundef %193, ptr noundef %198)
  br label %199

199:                                              ; preds = %174, %167
  %200 = load ptr, ptr %5, align 8
  %201 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %200, i32 0, i32 1
  %202 = getelementptr inbounds %struct.savable_state, ptr %201, i32 0, i32 2
  %203 = load i32, ptr %6, align 4
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds [4 x i32], ptr %202, i64 0, i64 %204
  store i32 0, ptr %205, align 4
  br label %206

206:                                              ; preds = %199
  %207 = load i32, ptr %6, align 4
  %208 = add nsw i32 %207, 1
  store i32 %208, ptr %6, align 4
  br label %30, !llvm.loop !25

209:                                              ; preds = %30
  %210 = load ptr, ptr %5, align 8
  %211 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %210, i32 0, i32 1
  %212 = getelementptr inbounds %struct.savable_state, ptr %211, i32 0, i32 0
  store i64 0, ptr %212, align 8
  %213 = load ptr, ptr %5, align 8
  %214 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %213, i32 0, i32 1
  %215 = getelementptr inbounds %struct.savable_state, ptr %214, i32 0, i32 1
  store i32 0, ptr %215, align 8
  %216 = load ptr, ptr %3, align 8
  %217 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %216, i32 0, i32 29
  %218 = load i32, ptr %217, align 8
  %219 = load ptr, ptr %5, align 8
  %220 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %219, i32 0, i32 2
  store i32 %218, ptr %220, align 8
  %221 = load ptr, ptr %5, align 8
  %222 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %221, i32 0, i32 3
  store i32 0, ptr %222, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @encode_mcu_gather(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca ptr, align 8
  store ptr %0, ptr %3, align 8
  store ptr %1, ptr %4, align 8
  %9 = load ptr, ptr %3, align 8
  %10 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %9, i32 0, i32 59
  %11 = load ptr, ptr %10, align 8
  store ptr %11, ptr %5, align 8
  %12 = load ptr, ptr %3, align 8
  %13 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %12, i32 0, i32 29
  %14 = load i32, ptr %13, align 8
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %49

16:                                               ; preds = %2
  %17 = load ptr, ptr %5, align 8
  %18 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %17, i32 0, i32 2
  %19 = load i32, ptr %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %44

21:                                               ; preds = %16
  store i32 0, ptr %7, align 4
  br label %22

22:                                               ; preds = %35, %21
  %23 = load i32, ptr %7, align 4
  %24 = load ptr, ptr %3, align 8
  %25 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %24, i32 0, i32 41
  %26 = load i32, ptr %25, align 4
  %27 = icmp slt i32 %23, %26
  br i1 %27, label %28, label %38

28:                                               ; preds = %22
  %29 = load ptr, ptr %5, align 8
  %30 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %29, i32 0, i32 1
  %31 = getelementptr inbounds %struct.savable_state, ptr %30, i32 0, i32 2
  %32 = load i32, ptr %7, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [4 x i32], ptr %31, i64 0, i64 %33
  store i32 0, ptr %34, align 4
  br label %35

35:                                               ; preds = %28
  %36 = load i32, ptr %7, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, ptr %7, align 4
  br label %22, !llvm.loop !26

38:                                               ; preds = %22
  %39 = load ptr, ptr %3, align 8
  %40 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %39, i32 0, i32 29
  %41 = load i32, ptr %40, align 8
  %42 = load ptr, ptr %5, align 8
  %43 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %42, i32 0, i32 2
  store i32 %41, ptr %43, align 8
  br label %44

44:                                               ; preds = %38, %16
  %45 = load ptr, ptr %5, align 8
  %46 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %45, i32 0, i32 2
  %47 = load i32, ptr %46, align 8
  %48 = add i32 %47, -1
  store i32 %48, ptr %46, align 8
  br label %49

49:                                               ; preds = %44, %2
  store i32 0, ptr %6, align 4
  br label %50

50:                                               ; preds = %114, %49
  %51 = load i32, ptr %6, align 4
  %52 = load ptr, ptr %3, align 8
  %53 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %52, i32 0, i32 45
  %54 = load i32, ptr %53, align 8
  %55 = icmp slt i32 %51, %54
  br i1 %55, label %56, label %117

56:                                               ; preds = %50
  %57 = load ptr, ptr %3, align 8
  %58 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %57, i32 0, i32 46
  %59 = load i32, ptr %6, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [10 x i32], ptr %58, i64 0, i64 %60
  %62 = load i32, ptr %61, align 4
  store i32 %62, ptr %7, align 4
  %63 = load ptr, ptr %3, align 8
  %64 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %63, i32 0, i32 42
  %65 = load i32, ptr %7, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [4 x ptr], ptr %64, i64 0, i64 %66
  %68 = load ptr, ptr %67, align 8
  store ptr %68, ptr %8, align 8
  %69 = load ptr, ptr %4, align 8
  %70 = load i32, ptr %6, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds ptr, ptr %69, i64 %71
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr inbounds [64 x i16], ptr %73, i64 0
  %75 = getelementptr inbounds [64 x i16], ptr %74, i64 0, i64 0
  %76 = load ptr, ptr %5, align 8
  %77 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %76, i32 0, i32 1
  %78 = getelementptr inbounds %struct.savable_state, ptr %77, i32 0, i32 2
  %79 = load i32, ptr %7, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [4 x i32], ptr %78, i64 0, i64 %80
  %82 = load i32, ptr %81, align 4
  %83 = load ptr, ptr %5, align 8
  %84 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %83, i32 0, i32 6
  %85 = load ptr, ptr %8, align 8
  %86 = getelementptr inbounds %struct.jpeg_component_info, ptr %85, i32 0, i32 5
  %87 = load i32, ptr %86, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [4 x ptr], ptr %84, i64 0, i64 %88
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %5, align 8
  %92 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %91, i32 0, i32 7
  %93 = load ptr, ptr %8, align 8
  %94 = getelementptr inbounds %struct.jpeg_component_info, ptr %93, i32 0, i32 6
  %95 = load i32, ptr %94, align 8
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [4 x ptr], ptr %92, i64 0, i64 %96
  %98 = load ptr, ptr %97, align 8
  call void @htest_one_block(ptr noundef %75, i32 noundef %82, ptr noundef %90, ptr noundef %98)
  %99 = load ptr, ptr %4, align 8
  %100 = load i32, ptr %6, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds ptr, ptr %99, i64 %101
  %103 = load ptr, ptr %102, align 8
  %104 = getelementptr inbounds [64 x i16], ptr %103, i64 0
  %105 = getelementptr inbounds [64 x i16], ptr %104, i64 0, i64 0
  %106 = load i16, ptr %105, align 2
  %107 = sext i16 %106 to i32
  %108 = load ptr, ptr %5, align 8
  %109 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %108, i32 0, i32 1
  %110 = getelementptr inbounds %struct.savable_state, ptr %109, i32 0, i32 2
  %111 = load i32, ptr %7, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [4 x i32], ptr %110, i64 0, i64 %112
  store i32 %107, ptr %113, align 4
  br label %114

114:                                              ; preds = %56
  %115 = load i32, ptr %6, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, ptr %6, align 4
  br label %50, !llvm.loop !27

117:                                              ; preds = %50
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_pass_gather(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca [4 x i32], align 16
  %10 = alloca [4 x i32], align 16
  store ptr %0, ptr %2, align 8
  %11 = load ptr, ptr %2, align 8
  %12 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %11, i32 0, i32 59
  %13 = load ptr, ptr %12, align 8
  store ptr %13, ptr %3, align 8
  %14 = getelementptr inbounds [4 x i32], ptr %9, i64 0, i64 0
  call void @llvm.memset.p0.i64(ptr align 16 %14, i8 0, i64 16, i1 false)
  %15 = getelementptr inbounds [4 x i32], ptr %10, i64 0, i64 0
  call void @llvm.memset.p0.i64(ptr align 16 %15, i8 0, i64 16, i1 false)
  store i32 0, ptr %4, align 4
  br label %16

16:                                               ; preds = %99, %1
  %17 = load i32, ptr %4, align 4
  %18 = load ptr, ptr %2, align 8
  %19 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %18, i32 0, i32 41
  %20 = load i32, ptr %19, align 4
  %21 = icmp slt i32 %17, %20
  br i1 %21, label %22, label %102

22:                                               ; preds = %16
  %23 = load ptr, ptr %2, align 8
  %24 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %23, i32 0, i32 42
  %25 = load i32, ptr %4, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [4 x ptr], ptr %24, i64 0, i64 %26
  %28 = load ptr, ptr %27, align 8
  store ptr %28, ptr %7, align 8
  %29 = load ptr, ptr %7, align 8
  %30 = getelementptr inbounds %struct.jpeg_component_info, ptr %29, i32 0, i32 5
  %31 = load i32, ptr %30, align 4
  store i32 %31, ptr %5, align 4
  %32 = load ptr, ptr %7, align 8
  %33 = getelementptr inbounds %struct.jpeg_component_info, ptr %32, i32 0, i32 6
  %34 = load i32, ptr %33, align 8
  store i32 %34, ptr %6, align 4
  %35 = load i32, ptr %5, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [4 x i32], ptr %9, i64 0, i64 %36
  %38 = load i32, ptr %37, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %66, label %40

40:                                               ; preds = %22
  %41 = load ptr, ptr %2, align 8
  %42 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %41, i32 0, i32 16
  %43 = load i32, ptr %5, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [4 x ptr], ptr %42, i64 0, i64 %44
  store ptr %45, ptr %8, align 8
  %46 = load ptr, ptr %8, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = icmp eq ptr %47, null
  br i1 %48, label %49, label %53

49:                                               ; preds = %40
  %50 = load ptr, ptr %2, align 8
  %51 = call ptr @jpeg_alloc_huff_table(ptr noundef %50)
  %52 = load ptr, ptr %8, align 8
  store ptr %51, ptr %52, align 8
  br label %53

53:                                               ; preds = %49, %40
  %54 = load ptr, ptr %2, align 8
  %55 = load ptr, ptr %8, align 8
  %56 = load ptr, ptr %55, align 8
  %57 = load ptr, ptr %3, align 8
  %58 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %57, i32 0, i32 6
  %59 = load i32, ptr %5, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [4 x ptr], ptr %58, i64 0, i64 %60
  %62 = load ptr, ptr %61, align 8
  call void @jpeg_gen_optimal_table(ptr noundef %54, ptr noundef %56, ptr noundef %62)
  %63 = load i32, ptr %5, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [4 x i32], ptr %9, i64 0, i64 %64
  store i32 1, ptr %65, align 4
  br label %66

66:                                               ; preds = %53, %22
  %67 = load i32, ptr %6, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [4 x i32], ptr %10, i64 0, i64 %68
  %70 = load i32, ptr %69, align 4
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %98, label %72

72:                                               ; preds = %66
  %73 = load ptr, ptr %2, align 8
  %74 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %73, i32 0, i32 17
  %75 = load i32, ptr %6, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [4 x ptr], ptr %74, i64 0, i64 %76
  store ptr %77, ptr %8, align 8
  %78 = load ptr, ptr %8, align 8
  %79 = load ptr, ptr %78, align 8
  %80 = icmp eq ptr %79, null
  br i1 %80, label %81, label %85

81:                                               ; preds = %72
  %82 = load ptr, ptr %2, align 8
  %83 = call ptr @jpeg_alloc_huff_table(ptr noundef %82)
  %84 = load ptr, ptr %8, align 8
  store ptr %83, ptr %84, align 8
  br label %85

85:                                               ; preds = %81, %72
  %86 = load ptr, ptr %2, align 8
  %87 = load ptr, ptr %8, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %3, align 8
  %90 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %89, i32 0, i32 7
  %91 = load i32, ptr %6, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [4 x ptr], ptr %90, i64 0, i64 %92
  %94 = load ptr, ptr %93, align 8
  call void @jpeg_gen_optimal_table(ptr noundef %86, ptr noundef %88, ptr noundef %94)
  %95 = load i32, ptr %6, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [4 x i32], ptr %10, i64 0, i64 %96
  store i32 1, ptr %97, align 4
  br label %98

98:                                               ; preds = %85, %66
  br label %99

99:                                               ; preds = %98
  %100 = load i32, ptr %4, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, ptr %4, align 4
  br label %16, !llvm.loop !28

102:                                              ; preds = %16
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @encode_mcu_huff(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca %struct.working_state, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  store ptr %0, ptr %4, align 8
  store ptr %1, ptr %5, align 8
  %11 = load ptr, ptr %4, align 8
  %12 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %11, i32 0, i32 59
  %13 = load ptr, ptr %12, align 8
  store ptr %13, ptr %6, align 8
  %14 = load ptr, ptr %4, align 8
  %15 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %14, i32 0, i32 5
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds %struct.jpeg_destination_mgr, ptr %16, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr inbounds %struct.working_state, ptr %7, i32 0, i32 0
  store ptr %18, ptr %19, align 8
  %20 = load ptr, ptr %4, align 8
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %20, i32 0, i32 5
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_destination_mgr, ptr %22, i32 0, i32 1
  %24 = load i64, ptr %23, align 8
  %25 = getelementptr inbounds %struct.working_state, ptr %7, i32 0, i32 1
  store i64 %24, ptr %25, align 8
  %26 = getelementptr inbounds %struct.working_state, ptr %7, i32 0, i32 2
  %27 = load ptr, ptr %6, align 8
  %28 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %27, i32 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %26, ptr align 8 %28, i64 32, i1 false)
  %29 = load ptr, ptr %4, align 8
  %30 = getelementptr inbounds %struct.working_state, ptr %7, i32 0, i32 3
  store ptr %29, ptr %30, align 8
  %31 = load ptr, ptr %4, align 8
  %32 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %31, i32 0, i32 29
  %33 = load i32, ptr %32, align 8
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %49

35:                                               ; preds = %2
  %36 = load ptr, ptr %6, align 8
  %37 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %36, i32 0, i32 2
  %38 = load i32, ptr %37, align 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %48

40:                                               ; preds = %35
  %41 = load ptr, ptr %6, align 8
  %42 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %41, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = call i32 @emit_restart(ptr noundef %7, i32 noundef %43)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %47, label %46

46:                                               ; preds = %40
  store i32 0, ptr %3, align 4
  br label %164

47:                                               ; preds = %40
  br label %48

48:                                               ; preds = %47, %35
  br label %49

49:                                               ; preds = %48, %2
  store i32 0, ptr %8, align 4
  br label %50

50:                                               ; preds = %116, %49
  %51 = load i32, ptr %8, align 4
  %52 = load ptr, ptr %4, align 8
  %53 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %52, i32 0, i32 45
  %54 = load i32, ptr %53, align 8
  %55 = icmp slt i32 %51, %54
  br i1 %55, label %56, label %119

56:                                               ; preds = %50
  %57 = load ptr, ptr %4, align 8
  %58 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %57, i32 0, i32 46
  %59 = load i32, ptr %8, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [10 x i32], ptr %58, i64 0, i64 %60
  %62 = load i32, ptr %61, align 4
  store i32 %62, ptr %9, align 4
  %63 = load ptr, ptr %4, align 8
  %64 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %63, i32 0, i32 42
  %65 = load i32, ptr %9, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [4 x ptr], ptr %64, i64 0, i64 %66
  %68 = load ptr, ptr %67, align 8
  store ptr %68, ptr %10, align 8
  %69 = load ptr, ptr %5, align 8
  %70 = load i32, ptr %8, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds ptr, ptr %69, i64 %71
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr inbounds [64 x i16], ptr %73, i64 0
  %75 = getelementptr inbounds [64 x i16], ptr %74, i64 0, i64 0
  %76 = getelementptr inbounds %struct.working_state, ptr %7, i32 0, i32 2
  %77 = getelementptr inbounds %struct.savable_state, ptr %76, i32 0, i32 2
  %78 = load i32, ptr %9, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [4 x i32], ptr %77, i64 0, i64 %79
  %81 = load i32, ptr %80, align 4
  %82 = load ptr, ptr %6, align 8
  %83 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %82, i32 0, i32 4
  %84 = load ptr, ptr %10, align 8
  %85 = getelementptr inbounds %struct.jpeg_component_info, ptr %84, i32 0, i32 5
  %86 = load i32, ptr %85, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [4 x ptr], ptr %83, i64 0, i64 %87
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %6, align 8
  %91 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %90, i32 0, i32 5
  %92 = load ptr, ptr %10, align 8
  %93 = getelementptr inbounds %struct.jpeg_component_info, ptr %92, i32 0, i32 6
  %94 = load i32, ptr %93, align 8
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [4 x ptr], ptr %91, i64 0, i64 %95
  %97 = load ptr, ptr %96, align 8
  %98 = call i32 @encode_one_block(ptr noundef %7, ptr noundef %75, i32 noundef %81, ptr noundef %89, ptr noundef %97)
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %101, label %100

100:                                              ; preds = %56
  store i32 0, ptr %3, align 4
  br label %164

101:                                              ; preds = %56
  %102 = load ptr, ptr %5, align 8
  %103 = load i32, ptr %8, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds ptr, ptr %102, i64 %104
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr inbounds [64 x i16], ptr %106, i64 0
  %108 = getelementptr inbounds [64 x i16], ptr %107, i64 0, i64 0
  %109 = load i16, ptr %108, align 2
  %110 = sext i16 %109 to i32
  %111 = getelementptr inbounds %struct.working_state, ptr %7, i32 0, i32 2
  %112 = getelementptr inbounds %struct.savable_state, ptr %111, i32 0, i32 2
  %113 = load i32, ptr %9, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [4 x i32], ptr %112, i64 0, i64 %114
  store i32 %110, ptr %115, align 4
  br label %116

116:                                              ; preds = %101
  %117 = load i32, ptr %8, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, ptr %8, align 4
  br label %50, !llvm.loop !29

119:                                              ; preds = %50
  %120 = getelementptr inbounds %struct.working_state, ptr %7, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = load ptr, ptr %4, align 8
  %123 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %122, i32 0, i32 5
  %124 = load ptr, ptr %123, align 8
  %125 = getelementptr inbounds %struct.jpeg_destination_mgr, ptr %124, i32 0, i32 0
  store ptr %121, ptr %125, align 8
  %126 = getelementptr inbounds %struct.working_state, ptr %7, i32 0, i32 1
  %127 = load i64, ptr %126, align 8
  %128 = load ptr, ptr %4, align 8
  %129 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %128, i32 0, i32 5
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr inbounds %struct.jpeg_destination_mgr, ptr %130, i32 0, i32 1
  store i64 %127, ptr %131, align 8
  %132 = load ptr, ptr %6, align 8
  %133 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %132, i32 0, i32 1
  %134 = getelementptr inbounds %struct.working_state, ptr %7, i32 0, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %133, ptr align 8 %134, i64 32, i1 false)
  %135 = load ptr, ptr %4, align 8
  %136 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %135, i32 0, i32 29
  %137 = load i32, ptr %136, align 8
  %138 = icmp ne i32 %137, 0
  br i1 %138, label %139, label %163

139:                                              ; preds = %119
  %140 = load ptr, ptr %6, align 8
  %141 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %140, i32 0, i32 2
  %142 = load i32, ptr %141, align 8
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %158

144:                                              ; preds = %139
  %145 = load ptr, ptr %4, align 8
  %146 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %145, i32 0, i32 29
  %147 = load i32, ptr %146, align 8
  %148 = load ptr, ptr %6, align 8
  %149 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %148, i32 0, i32 2
  store i32 %147, ptr %149, align 8
  %150 = load ptr, ptr %6, align 8
  %151 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %150, i32 0, i32 3
  %152 = load i32, ptr %151, align 4
  %153 = add nsw i32 %152, 1
  store i32 %153, ptr %151, align 4
  %154 = load ptr, ptr %6, align 8
  %155 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %154, i32 0, i32 3
  %156 = load i32, ptr %155, align 4
  %157 = and i32 %156, 7
  store i32 %157, ptr %155, align 4
  br label %158

158:                                              ; preds = %144, %139
  %159 = load ptr, ptr %6, align 8
  %160 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %159, i32 0, i32 2
  %161 = load i32, ptr %160, align 8
  %162 = add i32 %161, -1
  store i32 %162, ptr %160, align 8
  br label %163

163:                                              ; preds = %158, %119
  store i32 1, ptr %3, align 4
  br label %164

164:                                              ; preds = %163, %100, %46
  %165 = load i32, ptr %3, align 4
  ret i32 %165
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_pass_huff(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca %struct.working_state, align 8
  store ptr %0, ptr %2, align 8
  %5 = load ptr, ptr %2, align 8
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %5, i32 0, i32 59
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %3, align 8
  %8 = load ptr, ptr %2, align 8
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %8, i32 0, i32 5
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_destination_mgr, ptr %10, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds %struct.working_state, ptr %4, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = load ptr, ptr %2, align 8
  %15 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %14, i32 0, i32 5
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds %struct.jpeg_destination_mgr, ptr %16, i32 0, i32 1
  %18 = load i64, ptr %17, align 8
  %19 = getelementptr inbounds %struct.working_state, ptr %4, i32 0, i32 1
  store i64 %18, ptr %19, align 8
  %20 = getelementptr inbounds %struct.working_state, ptr %4, i32 0, i32 2
  %21 = load ptr, ptr %3, align 8
  %22 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %21, i32 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %20, ptr align 8 %22, i64 32, i1 false)
  %23 = load ptr, ptr %2, align 8
  %24 = getelementptr inbounds %struct.working_state, ptr %4, i32 0, i32 3
  store ptr %23, ptr %24, align 8
  %25 = call i32 @flush_bits(ptr noundef %4)
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %38, label %27

27:                                               ; preds = %1
  %28 = load ptr, ptr %2, align 8
  %29 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %30, i32 0, i32 5
  store i32 22, ptr %31, align 8
  %32 = load ptr, ptr %2, align 8
  %33 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %2, align 8
  call void %36(ptr noundef %37)
  br label %38

38:                                               ; preds = %27, %1
  %39 = getelementptr inbounds %struct.working_state, ptr %4, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = load ptr, ptr %2, align 8
  %42 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %41, i32 0, i32 5
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr inbounds %struct.jpeg_destination_mgr, ptr %43, i32 0, i32 0
  store ptr %40, ptr %44, align 8
  %45 = getelementptr inbounds %struct.working_state, ptr %4, i32 0, i32 1
  %46 = load i64, ptr %45, align 8
  %47 = load ptr, ptr %2, align 8
  %48 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %47, i32 0, i32 5
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr inbounds %struct.jpeg_destination_mgr, ptr %49, i32 0, i32 1
  store i64 %46, ptr %50, align 8
  %51 = load ptr, ptr %3, align 8
  %52 = getelementptr inbounds %struct.huff_entropy_encoder, ptr %51, i32 0, i32 1
  %53 = getelementptr inbounds %struct.working_state, ptr %4, i32 0, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %52, ptr align 8 %53, i64 32, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @htest_one_block(ptr noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store ptr %0, ptr %5, align 8
  store i32 %1, ptr %6, align 4
  store ptr %2, ptr %7, align 8
  store ptr %3, ptr %8, align 8
  %13 = load ptr, ptr %5, align 8
  %14 = getelementptr inbounds i16, ptr %13, i64 0
  %15 = load i16, ptr %14, align 2
  %16 = sext i16 %15 to i32
  %17 = load i32, ptr %6, align 4
  %18 = sub nsw i32 %16, %17
  store i32 %18, ptr %9, align 4
  %19 = load i32, ptr %9, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %4
  %22 = load i32, ptr %9, align 4
  %23 = sub nsw i32 0, %22
  store i32 %23, ptr %9, align 4
  br label %24

24:                                               ; preds = %21, %4
  store i32 0, ptr %10, align 4
  br label %25

25:                                               ; preds = %28, %24
  %26 = load i32, ptr %9, align 4
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %33

28:                                               ; preds = %25
  %29 = load i32, ptr %10, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %10, align 4
  %31 = load i32, ptr %9, align 4
  %32 = ashr i32 %31, 1
  store i32 %32, ptr %9, align 4
  br label %25, !llvm.loop !30

33:                                               ; preds = %25
  %34 = load ptr, ptr %7, align 8
  %35 = load i32, ptr %10, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i64, ptr %34, i64 %36
  %38 = load i64, ptr %37, align 8
  %39 = add nsw i64 %38, 1
  store i64 %39, ptr %37, align 8
  store i32 0, ptr %12, align 4
  store i32 1, ptr %11, align 4
  br label %40

40:                                               ; preds = %93, %33
  %41 = load i32, ptr %11, align 4
  %42 = icmp slt i32 %41, 64
  br i1 %42, label %43, label %96

43:                                               ; preds = %40
  %44 = load ptr, ptr %5, align 8
  %45 = load i32, ptr %11, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [0 x i32], ptr @jpeg_natural_order, i64 0, i64 %46
  %48 = load i32, ptr %47, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i16, ptr %44, i64 %49
  %51 = load i16, ptr %50, align 2
  %52 = sext i16 %51 to i32
  store i32 %52, ptr %9, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %43
  %55 = load i32, ptr %12, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, ptr %12, align 4
  br label %92

57:                                               ; preds = %43
  br label %58

58:                                               ; preds = %61, %57
  %59 = load i32, ptr %12, align 4
  %60 = icmp sgt i32 %59, 15
  br i1 %60, label %61, label %68

61:                                               ; preds = %58
  %62 = load ptr, ptr %8, align 8
  %63 = getelementptr inbounds i64, ptr %62, i64 240
  %64 = load i64, ptr %63, align 8
  %65 = add nsw i64 %64, 1
  store i64 %65, ptr %63, align 8
  %66 = load i32, ptr %12, align 4
  %67 = sub nsw i32 %66, 16
  store i32 %67, ptr %12, align 4
  br label %58, !llvm.loop !31

68:                                               ; preds = %58
  %69 = load i32, ptr %9, align 4
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %68
  %72 = load i32, ptr %9, align 4
  %73 = sub nsw i32 0, %72
  store i32 %73, ptr %9, align 4
  br label %74

74:                                               ; preds = %71, %68
  store i32 1, ptr %10, align 4
  br label %75

75:                                               ; preds = %79, %74
  %76 = load i32, ptr %9, align 4
  %77 = ashr i32 %76, 1
  store i32 %77, ptr %9, align 4
  %78 = icmp ne i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %75
  %80 = load i32, ptr %10, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, ptr %10, align 4
  br label %75, !llvm.loop !32

82:                                               ; preds = %75
  %83 = load ptr, ptr %8, align 8
  %84 = load i32, ptr %12, align 4
  %85 = shl i32 %84, 4
  %86 = load i32, ptr %10, align 4
  %87 = add nsw i32 %85, %86
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i64, ptr %83, i64 %88
  %90 = load i64, ptr %89, align 8
  %91 = add nsw i64 %90, 1
  store i64 %91, ptr %89, align 8
  store i32 0, ptr %12, align 4
  br label %92

92:                                               ; preds = %82, %54
  br label %93

93:                                               ; preds = %92
  %94 = load i32, ptr %11, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, ptr %11, align 4
  br label %40, !llvm.loop !33

96:                                               ; preds = %40
  %97 = load i32, ptr %12, align 4
  %98 = icmp sgt i32 %97, 0
  br i1 %98, label %99, label %104

99:                                               ; preds = %96
  %100 = load ptr, ptr %8, align 8
  %101 = getelementptr inbounds i64, ptr %100, i64 0
  %102 = load i64, ptr %101, align 8
  %103 = add nsw i64 %102, 1
  store i64 %103, ptr %101, align 8
  br label %104

104:                                              ; preds = %99, %96
  ret void
}

declare ptr @jpeg_alloc_huff_table(ptr noundef) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @emit_restart(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store ptr %0, ptr %4, align 8
  store i32 %1, ptr %5, align 4
  %7 = load ptr, ptr %4, align 8
  %8 = call i32 @flush_bits(ptr noundef %7)
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  store i32 0, ptr %3, align 4
  br label %66

11:                                               ; preds = %2
  %12 = load ptr, ptr %4, align 8
  %13 = getelementptr inbounds %struct.working_state, ptr %12, i32 0, i32 0
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %14, i32 1
  store ptr %15, ptr %13, align 8
  store i8 -1, ptr %14, align 1
  %16 = load ptr, ptr %4, align 8
  %17 = getelementptr inbounds %struct.working_state, ptr %16, i32 0, i32 1
  %18 = load i64, ptr %17, align 8
  %19 = add i64 %18, -1
  store i64 %19, ptr %17, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %27

21:                                               ; preds = %11
  %22 = load ptr, ptr %4, align 8
  %23 = call i32 @dump_buffer(ptr noundef %22)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %21
  store i32 0, ptr %3, align 4
  br label %66

26:                                               ; preds = %21
  br label %27

27:                                               ; preds = %26, %11
  %28 = load i32, ptr %5, align 4
  %29 = add nsw i32 208, %28
  %30 = trunc i32 %29 to i8
  %31 = load ptr, ptr %4, align 8
  %32 = getelementptr inbounds %struct.working_state, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %33, i32 1
  store ptr %34, ptr %32, align 8
  store i8 %30, ptr %33, align 1
  %35 = load ptr, ptr %4, align 8
  %36 = getelementptr inbounds %struct.working_state, ptr %35, i32 0, i32 1
  %37 = load i64, ptr %36, align 8
  %38 = add i64 %37, -1
  store i64 %38, ptr %36, align 8
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %46

40:                                               ; preds = %27
  %41 = load ptr, ptr %4, align 8
  %42 = call i32 @dump_buffer(ptr noundef %41)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %40
  store i32 0, ptr %3, align 4
  br label %66

45:                                               ; preds = %40
  br label %46

46:                                               ; preds = %45, %27
  store i32 0, ptr %6, align 4
  br label %47

47:                                               ; preds = %62, %46
  %48 = load i32, ptr %6, align 4
  %49 = load ptr, ptr %4, align 8
  %50 = getelementptr inbounds %struct.working_state, ptr %49, i32 0, i32 3
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %51, i32 0, i32 41
  %53 = load i32, ptr %52, align 4
  %54 = icmp slt i32 %48, %53
  br i1 %54, label %55, label %65

55:                                               ; preds = %47
  %56 = load ptr, ptr %4, align 8
  %57 = getelementptr inbounds %struct.working_state, ptr %56, i32 0, i32 2
  %58 = getelementptr inbounds %struct.savable_state, ptr %57, i32 0, i32 2
  %59 = load i32, ptr %6, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [4 x i32], ptr %58, i64 0, i64 %60
  store i32 0, ptr %61, align 4
  br label %62

62:                                               ; preds = %55
  %63 = load i32, ptr %6, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, ptr %6, align 4
  br label %47, !llvm.loop !34

65:                                               ; preds = %47
  store i32 1, ptr %3, align 4
  br label %66

66:                                               ; preds = %65, %44, %25, %10
  %67 = load i32, ptr %3, align 4
  ret i32 %67
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @encode_one_block(ptr noundef %0, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store ptr %0, ptr %7, align 8
  store ptr %1, ptr %8, align 8
  store i32 %2, ptr %9, align 4
  store ptr %3, ptr %10, align 8
  store ptr %4, ptr %11, align 8
  %18 = load ptr, ptr %8, align 8
  %19 = getelementptr inbounds i16, ptr %18, i64 0
  %20 = load i16, ptr %19, align 2
  %21 = sext i16 %20 to i32
  %22 = load i32, ptr %9, align 4
  %23 = sub nsw i32 %21, %22
  store i32 %23, ptr %13, align 4
  store i32 %23, ptr %12, align 4
  %24 = load i32, ptr %12, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %26, label %31

26:                                               ; preds = %5
  %27 = load i32, ptr %12, align 4
  %28 = sub nsw i32 0, %27
  store i32 %28, ptr %12, align 4
  %29 = load i32, ptr %13, align 4
  %30 = add nsw i32 %29, -1
  store i32 %30, ptr %13, align 4
  br label %31

31:                                               ; preds = %26, %5
  store i32 0, ptr %14, align 4
  br label %32

32:                                               ; preds = %35, %31
  %33 = load i32, ptr %12, align 4
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %32
  %36 = load i32, ptr %14, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, ptr %14, align 4
  %38 = load i32, ptr %12, align 4
  %39 = ashr i32 %38, 1
  store i32 %39, ptr %12, align 4
  br label %32, !llvm.loop !35

40:                                               ; preds = %32
  %41 = load ptr, ptr %7, align 8
  %42 = load ptr, ptr %10, align 8
  %43 = getelementptr inbounds %struct.c_derived_tbl, ptr %42, i32 0, i32 0
  %44 = load i32, ptr %14, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [256 x i32], ptr %43, i64 0, i64 %45
  %47 = load i32, ptr %46, align 4
  %48 = load ptr, ptr %10, align 8
  %49 = getelementptr inbounds %struct.c_derived_tbl, ptr %48, i32 0, i32 1
  %50 = load i32, ptr %14, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [256 x i8], ptr %49, i64 0, i64 %51
  %53 = load i8, ptr %52, align 1
  %54 = sext i8 %53 to i32
  %55 = call i32 @emit_bits(ptr noundef %41, i32 noundef %47, i32 noundef %54)
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %58, label %57

57:                                               ; preds = %40
  store i32 0, ptr %6, align 4
  br label %178

58:                                               ; preds = %40
  %59 = load i32, ptr %14, align 4
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %69

61:                                               ; preds = %58
  %62 = load ptr, ptr %7, align 8
  %63 = load i32, ptr %13, align 4
  %64 = load i32, ptr %14, align 4
  %65 = call i32 @emit_bits(ptr noundef %62, i32 noundef %63, i32 noundef %64)
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %68, label %67

67:                                               ; preds = %61
  store i32 0, ptr %6, align 4
  br label %178

68:                                               ; preds = %61
  br label %69

69:                                               ; preds = %68, %58
  store i32 0, ptr %16, align 4
  store i32 1, ptr %15, align 4
  br label %70

70:                                               ; preds = %156, %69
  %71 = load i32, ptr %15, align 4
  %72 = icmp slt i32 %71, 64
  br i1 %72, label %73, label %159

73:                                               ; preds = %70
  %74 = load ptr, ptr %8, align 8
  %75 = load i32, ptr %15, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [0 x i32], ptr @jpeg_natural_order, i64 0, i64 %76
  %78 = load i32, ptr %77, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i16, ptr %74, i64 %79
  %81 = load i16, ptr %80, align 2
  %82 = sext i16 %81 to i32
  store i32 %82, ptr %12, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %73
  %85 = load i32, ptr %16, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, ptr %16, align 4
  br label %155

87:                                               ; preds = %73
  br label %88

88:                                               ; preds = %105, %87
  %89 = load i32, ptr %16, align 4
  %90 = icmp sgt i32 %89, 15
  br i1 %90, label %91, label %108

91:                                               ; preds = %88
  %92 = load ptr, ptr %7, align 8
  %93 = load ptr, ptr %11, align 8
  %94 = getelementptr inbounds %struct.c_derived_tbl, ptr %93, i32 0, i32 0
  %95 = getelementptr inbounds [256 x i32], ptr %94, i64 0, i64 240
  %96 = load i32, ptr %95, align 4
  %97 = load ptr, ptr %11, align 8
  %98 = getelementptr inbounds %struct.c_derived_tbl, ptr %97, i32 0, i32 1
  %99 = getelementptr inbounds [256 x i8], ptr %98, i64 0, i64 240
  %100 = load i8, ptr %99, align 4
  %101 = sext i8 %100 to i32
  %102 = call i32 @emit_bits(ptr noundef %92, i32 noundef %96, i32 noundef %101)
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %105, label %104

104:                                              ; preds = %91
  store i32 0, ptr %6, align 4
  br label %178

105:                                              ; preds = %91
  %106 = load i32, ptr %16, align 4
  %107 = sub nsw i32 %106, 16
  store i32 %107, ptr %16, align 4
  br label %88, !llvm.loop !36

108:                                              ; preds = %88
  %109 = load i32, ptr %12, align 4
  store i32 %109, ptr %13, align 4
  %110 = load i32, ptr %12, align 4
  %111 = icmp slt i32 %110, 0
  br i1 %111, label %112, label %117

112:                                              ; preds = %108
  %113 = load i32, ptr %12, align 4
  %114 = sub nsw i32 0, %113
  store i32 %114, ptr %12, align 4
  %115 = load i32, ptr %13, align 4
  %116 = add nsw i32 %115, -1
  store i32 %116, ptr %13, align 4
  br label %117

117:                                              ; preds = %112, %108
  store i32 1, ptr %14, align 4
  br label %118

118:                                              ; preds = %122, %117
  %119 = load i32, ptr %12, align 4
  %120 = ashr i32 %119, 1
  store i32 %120, ptr %12, align 4
  %121 = icmp ne i32 %120, 0
  br i1 %121, label %122, label %125

122:                                              ; preds = %118
  %123 = load i32, ptr %14, align 4
  %124 = add nsw i32 %123, 1
  store i32 %124, ptr %14, align 4
  br label %118, !llvm.loop !37

125:                                              ; preds = %118
  %126 = load i32, ptr %16, align 4
  %127 = shl i32 %126, 4
  %128 = load i32, ptr %14, align 4
  %129 = add nsw i32 %127, %128
  store i32 %129, ptr %17, align 4
  %130 = load ptr, ptr %7, align 8
  %131 = load ptr, ptr %11, align 8
  %132 = getelementptr inbounds %struct.c_derived_tbl, ptr %131, i32 0, i32 0
  %133 = load i32, ptr %17, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds [256 x i32], ptr %132, i64 0, i64 %134
  %136 = load i32, ptr %135, align 4
  %137 = load ptr, ptr %11, align 8
  %138 = getelementptr inbounds %struct.c_derived_tbl, ptr %137, i32 0, i32 1
  %139 = load i32, ptr %17, align 4
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds [256 x i8], ptr %138, i64 0, i64 %140
  %142 = load i8, ptr %141, align 1
  %143 = sext i8 %142 to i32
  %144 = call i32 @emit_bits(ptr noundef %130, i32 noundef %136, i32 noundef %143)
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %147, label %146

146:                                              ; preds = %125
  store i32 0, ptr %6, align 4
  br label %178

147:                                              ; preds = %125
  %148 = load ptr, ptr %7, align 8
  %149 = load i32, ptr %13, align 4
  %150 = load i32, ptr %14, align 4
  %151 = call i32 @emit_bits(ptr noundef %148, i32 noundef %149, i32 noundef %150)
  %152 = icmp ne i32 %151, 0
  br i1 %152, label %154, label %153

153:                                              ; preds = %147
  store i32 0, ptr %6, align 4
  br label %178

154:                                              ; preds = %147
  store i32 0, ptr %16, align 4
  br label %155

155:                                              ; preds = %154, %84
  br label %156

156:                                              ; preds = %155
  %157 = load i32, ptr %15, align 4
  %158 = add nsw i32 %157, 1
  store i32 %158, ptr %15, align 4
  br label %70, !llvm.loop !38

159:                                              ; preds = %70
  %160 = load i32, ptr %16, align 4
  %161 = icmp sgt i32 %160, 0
  br i1 %161, label %162, label %177

162:                                              ; preds = %159
  %163 = load ptr, ptr %7, align 8
  %164 = load ptr, ptr %11, align 8
  %165 = getelementptr inbounds %struct.c_derived_tbl, ptr %164, i32 0, i32 0
  %166 = getelementptr inbounds [256 x i32], ptr %165, i64 0, i64 0
  %167 = load i32, ptr %166, align 4
  %168 = load ptr, ptr %11, align 8
  %169 = getelementptr inbounds %struct.c_derived_tbl, ptr %168, i32 0, i32 1
  %170 = getelementptr inbounds [256 x i8], ptr %169, i64 0, i64 0
  %171 = load i8, ptr %170, align 4
  %172 = sext i8 %171 to i32
  %173 = call i32 @emit_bits(ptr noundef %163, i32 noundef %167, i32 noundef %172)
  %174 = icmp ne i32 %173, 0
  br i1 %174, label %176, label %175

175:                                              ; preds = %162
  store i32 0, ptr %6, align 4
  br label %178

176:                                              ; preds = %162
  br label %177

177:                                              ; preds = %176, %159
  store i32 1, ptr %6, align 4
  br label %178

178:                                              ; preds = %177, %175, %153, %146, %104, %67, %57
  %179 = load i32, ptr %6, align 4
  ret i32 %179
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @flush_bits(ptr noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca ptr, align 8
  store ptr %0, ptr %3, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = call i32 @emit_bits(ptr noundef %4, i32 noundef 127, i32 noundef 7)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  store i32 0, ptr %2, align 4
  br label %15

8:                                                ; preds = %1
  %9 = load ptr, ptr %3, align 8
  %10 = getelementptr inbounds %struct.working_state, ptr %9, i32 0, i32 2
  %11 = getelementptr inbounds %struct.savable_state, ptr %10, i32 0, i32 0
  store i64 0, ptr %11, align 8
  %12 = load ptr, ptr %3, align 8
  %13 = getelementptr inbounds %struct.working_state, ptr %12, i32 0, i32 2
  %14 = getelementptr inbounds %struct.savable_state, ptr %13, i32 0, i32 1
  store i32 0, ptr %14, align 8
  store i32 1, ptr %2, align 4
  br label %15

15:                                               ; preds = %8, %7
  %16 = load i32, ptr %2, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @dump_buffer(ptr noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  store ptr %0, ptr %3, align 8
  %5 = load ptr, ptr %3, align 8
  %6 = getelementptr inbounds %struct.working_state, ptr %5, i32 0, i32 3
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %7, i32 0, i32 5
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %4, align 8
  %10 = load ptr, ptr %4, align 8
  %11 = getelementptr inbounds %struct.jpeg_destination_mgr, ptr %10, i32 0, i32 3
  %12 = load ptr, ptr %11, align 8
  %13 = load ptr, ptr %3, align 8
  %14 = getelementptr inbounds %struct.working_state, ptr %13, i32 0, i32 3
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %12(ptr noundef %15)
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %1
  store i32 0, ptr %2, align 4
  br label %30

19:                                               ; preds = %1
  %20 = load ptr, ptr %4, align 8
  %21 = getelementptr inbounds %struct.jpeg_destination_mgr, ptr %20, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %3, align 8
  %24 = getelementptr inbounds %struct.working_state, ptr %23, i32 0, i32 0
  store ptr %22, ptr %24, align 8
  %25 = load ptr, ptr %4, align 8
  %26 = getelementptr inbounds %struct.jpeg_destination_mgr, ptr %25, i32 0, i32 1
  %27 = load i64, ptr %26, align 8
  %28 = load ptr, ptr %3, align 8
  %29 = getelementptr inbounds %struct.working_state, ptr %28, i32 0, i32 1
  store i64 %27, ptr %29, align 8
  store i32 1, ptr %2, align 4
  br label %30

30:                                               ; preds = %19, %18
  %31 = load i32, ptr %2, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @emit_bits(ptr noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store ptr %0, ptr %5, align 8
  store i32 %1, ptr %6, align 4
  store i32 %2, ptr %7, align 4
  %11 = load i32, ptr %6, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, ptr %8, align 8
  %13 = load ptr, ptr %5, align 8
  %14 = getelementptr inbounds %struct.working_state, ptr %13, i32 0, i32 2
  %15 = getelementptr inbounds %struct.savable_state, ptr %14, i32 0, i32 1
  %16 = load i32, ptr %15, align 8
  store i32 %16, ptr %9, align 4
  %17 = load i32, ptr %7, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %36

19:                                               ; preds = %3
  %20 = load ptr, ptr %5, align 8
  %21 = getelementptr inbounds %struct.working_state, ptr %20, i32 0, i32 3
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %22, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %24, i32 0, i32 5
  store i32 39, ptr %25, align 8
  %26 = load ptr, ptr %5, align 8
  %27 = getelementptr inbounds %struct.working_state, ptr %26, i32 0, i32 3
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %30, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %5, align 8
  %34 = getelementptr inbounds %struct.working_state, ptr %33, i32 0, i32 3
  %35 = load ptr, ptr %34, align 8
  call void %32(ptr noundef %35)
  br label %36

36:                                               ; preds = %19, %3
  %37 = load i32, ptr %7, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = sub nsw i64 %39, 1
  %41 = load i64, ptr %8, align 8
  %42 = and i64 %41, %40
  store i64 %42, ptr %8, align 8
  %43 = load i32, ptr %7, align 4
  %44 = load i32, ptr %9, align 4
  %45 = add nsw i32 %44, %43
  store i32 %45, ptr %9, align 4
  %46 = load i32, ptr %9, align 4
  %47 = sub nsw i32 24, %46
  %48 = load i64, ptr %8, align 8
  %49 = zext i32 %47 to i64
  %50 = shl i64 %48, %49
  store i64 %50, ptr %8, align 8
  %51 = load ptr, ptr %5, align 8
  %52 = getelementptr inbounds %struct.working_state, ptr %51, i32 0, i32 2
  %53 = getelementptr inbounds %struct.savable_state, ptr %52, i32 0, i32 0
  %54 = load i64, ptr %53, align 8
  %55 = load i64, ptr %8, align 8
  %56 = or i64 %55, %54
  store i64 %56, ptr %8, align 8
  br label %57

57:                                               ; preds = %102, %36
  %58 = load i32, ptr %9, align 4
  %59 = icmp sge i32 %58, 8
  br i1 %59, label %60, label %107

60:                                               ; preds = %57
  %61 = load i64, ptr %8, align 8
  %62 = ashr i64 %61, 16
  %63 = and i64 %62, 255
  %64 = trunc i64 %63 to i32
  store i32 %64, ptr %10, align 4
  %65 = load i32, ptr %10, align 4
  %66 = trunc i32 %65 to i8
  %67 = load ptr, ptr %5, align 8
  %68 = getelementptr inbounds %struct.working_state, ptr %67, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr inbounds i8, ptr %69, i32 1
  store ptr %70, ptr %68, align 8
  store i8 %66, ptr %69, align 1
  %71 = load ptr, ptr %5, align 8
  %72 = getelementptr inbounds %struct.working_state, ptr %71, i32 0, i32 1
  %73 = load i64, ptr %72, align 8
  %74 = add i64 %73, -1
  store i64 %74, ptr %72, align 8
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %82

76:                                               ; preds = %60
  %77 = load ptr, ptr %5, align 8
  %78 = call i32 @dump_buffer(ptr noundef %77)
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %81, label %80

80:                                               ; preds = %76
  store i32 0, ptr %4, align 4
  br label %116

81:                                               ; preds = %76
  br label %82

82:                                               ; preds = %81, %60
  %83 = load i32, ptr %10, align 4
  %84 = icmp eq i32 %83, 255
  br i1 %84, label %85, label %102

85:                                               ; preds = %82
  %86 = load ptr, ptr %5, align 8
  %87 = getelementptr inbounds %struct.working_state, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr inbounds i8, ptr %88, i32 1
  store ptr %89, ptr %87, align 8
  store i8 0, ptr %88, align 1
  %90 = load ptr, ptr %5, align 8
  %91 = getelementptr inbounds %struct.working_state, ptr %90, i32 0, i32 1
  %92 = load i64, ptr %91, align 8
  %93 = add i64 %92, -1
  store i64 %93, ptr %91, align 8
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %101

95:                                               ; preds = %85
  %96 = load ptr, ptr %5, align 8
  %97 = call i32 @dump_buffer(ptr noundef %96)
  %98 = icmp ne i32 %97, 0
  br i1 %98, label %100, label %99

99:                                               ; preds = %95
  store i32 0, ptr %4, align 4
  br label %116

100:                                              ; preds = %95
  br label %101

101:                                              ; preds = %100, %85
  br label %102

102:                                              ; preds = %101, %82
  %103 = load i64, ptr %8, align 8
  %104 = shl i64 %103, 8
  store i64 %104, ptr %8, align 8
  %105 = load i32, ptr %9, align 4
  %106 = sub nsw i32 %105, 8
  store i32 %106, ptr %9, align 4
  br label %57, !llvm.loop !39

107:                                              ; preds = %57
  %108 = load i64, ptr %8, align 8
  %109 = load ptr, ptr %5, align 8
  %110 = getelementptr inbounds %struct.working_state, ptr %109, i32 0, i32 2
  %111 = getelementptr inbounds %struct.savable_state, ptr %110, i32 0, i32 0
  store i64 %108, ptr %111, align 8
  %112 = load i32, ptr %9, align 4
  %113 = load ptr, ptr %5, align 8
  %114 = getelementptr inbounds %struct.working_state, ptr %113, i32 0, i32 2
  %115 = getelementptr inbounds %struct.savable_state, ptr %114, i32 0, i32 1
  store i32 %112, ptr %115, align 8
  store i32 1, ptr %4, align 4
  br label %116

116:                                              ; preds = %107, %99, %80
  %117 = load i32, ptr %4, align 4
  ret i32 %117
}

attributes #0 = { noinline nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nocallback nofree nounwind willreturn writeonly }
attributes #2 = { argmemonly nocallback nofree nounwind willreturn }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 15.0.7"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !7}
!12 = distinct !{!12, !7}
!13 = distinct !{!13, !7}
!14 = distinct !{!14, !7}
!15 = distinct !{!15, !7}
!16 = distinct !{!16, !7}
!17 = distinct !{!17, !7}
!18 = distinct !{!18, !7}
!19 = distinct !{!19, !7}
!20 = distinct !{!20, !7}
!21 = distinct !{!21, !7}
!22 = distinct !{!22, !7}
!23 = distinct !{!23, !7}
!24 = distinct !{!24, !7}
!25 = distinct !{!25, !7}
!26 = distinct !{!26, !7}
!27 = distinct !{!27, !7}
!28 = distinct !{!28, !7}
!29 = distinct !{!29, !7}
!30 = distinct !{!30, !7}
!31 = distinct !{!31, !7}
!32 = distinct !{!32, !7}
!33 = distinct !{!33, !7}
!34 = distinct !{!34, !7}
!35 = distinct !{!35, !7}
!36 = distinct !{!36, !7}
!37 = distinct !{!37, !7}
!38 = distinct !{!38, !7}
!39 = distinct !{!39, !7}
