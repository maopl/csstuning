; ModuleID = 'jcsample.bc'
source_filename = "jcsample.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.jpeg_compress_struct = type { ptr, ptr, ptr, i32, i32, ptr, i32, i32, i32, i32, double, i32, i32, i32, ptr, [4 x ptr], [4 x ptr], [4 x ptr], [16 x i8], [16 x i8], [16 x i8], i32, ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x ptr], i32, i32, i32, [10 x i32], i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.jpeg_memory_mgr = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64 }
%struct.my_downsampler = type { %struct.jpeg_downsampler, [10 x ptr] }
%struct.jpeg_downsampler = type { ptr, ptr, i32 }
%struct.jpeg_error_mgr = type { ptr, ptr, ptr, ptr, ptr, i32, %union.anon, i32, i64, ptr, i32, ptr, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr }

; Function Attrs: noinline nounwind uwtable
define dso_local void @jinit_downsampler(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  store ptr %0, ptr %2, align 8
  store i32 1, ptr %6, align 4
  %7 = load ptr, ptr %2, align 8
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %7, i32 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %9, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %2, align 8
  %13 = call ptr %11(ptr noundef %12, i32 noundef 1, i64 noundef 104)
  store ptr %13, ptr %3, align 8
  %14 = load ptr, ptr %3, align 8
  %15 = load ptr, ptr %2, align 8
  %16 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %15, i32 0, i32 57
  store ptr %14, ptr %16, align 8
  %17 = load ptr, ptr %3, align 8
  %18 = getelementptr inbounds %struct.my_downsampler, ptr %17, i32 0, i32 0
  %19 = getelementptr inbounds %struct.jpeg_downsampler, ptr %18, i32 0, i32 0
  store ptr @start_pass_downsample, ptr %19, align 8
  %20 = load ptr, ptr %3, align 8
  %21 = getelementptr inbounds %struct.my_downsampler, ptr %20, i32 0, i32 0
  %22 = getelementptr inbounds %struct.jpeg_downsampler, ptr %21, i32 0, i32 1
  store ptr @sep_downsample, ptr %22, align 8
  %23 = load ptr, ptr %3, align 8
  %24 = getelementptr inbounds %struct.my_downsampler, ptr %23, i32 0, i32 0
  %25 = getelementptr inbounds %struct.jpeg_downsampler, ptr %24, i32 0, i32 2
  store i32 0, ptr %25, align 8
  %26 = load ptr, ptr %2, align 8
  %27 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %26, i32 0, i32 26
  %28 = load i32, ptr %27, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %41

30:                                               ; preds = %1
  %31 = load ptr, ptr %2, align 8
  %32 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %33, i32 0, i32 5
  store i32 23, ptr %34, align 8
  %35 = load ptr, ptr %2, align 8
  %36 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %2, align 8
  call void %39(ptr noundef %40)
  br label %41

41:                                               ; preds = %30, %1
  store i32 0, ptr %4, align 4
  %42 = load ptr, ptr %2, align 8
  %43 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %42, i32 0, i32 14
  %44 = load ptr, ptr %43, align 8
  store ptr %44, ptr %5, align 8
  br label %45

45:                                               ; preds = %189, %41
  %46 = load i32, ptr %4, align 4
  %47 = load ptr, ptr %2, align 8
  %48 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %47, i32 0, i32 12
  %49 = load i32, ptr %48, align 4
  %50 = icmp slt i32 %46, %49
  br i1 %50, label %51, label %194

51:                                               ; preds = %45
  %52 = load ptr, ptr %5, align 8
  %53 = getelementptr inbounds %struct.jpeg_component_info, ptr %52, i32 0, i32 2
  %54 = load i32, ptr %53, align 8
  %55 = load ptr, ptr %2, align 8
  %56 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %55, i32 0, i32 38
  %57 = load i32, ptr %56, align 8
  %58 = icmp eq i32 %54, %57
  br i1 %58, label %59, label %88

59:                                               ; preds = %51
  %60 = load ptr, ptr %5, align 8
  %61 = getelementptr inbounds %struct.jpeg_component_info, ptr %60, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = load ptr, ptr %2, align 8
  %64 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %63, i32 0, i32 39
  %65 = load i32, ptr %64, align 4
  %66 = icmp eq i32 %62, %65
  br i1 %66, label %67, label %88

67:                                               ; preds = %59
  %68 = load ptr, ptr %2, align 8
  %69 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %68, i32 0, i32 27
  %70 = load i32, ptr %69, align 8
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %72, label %81

72:                                               ; preds = %67
  %73 = load ptr, ptr %3, align 8
  %74 = getelementptr inbounds %struct.my_downsampler, ptr %73, i32 0, i32 1
  %75 = load i32, ptr %4, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [10 x ptr], ptr %74, i64 0, i64 %76
  store ptr @fullsize_smooth_downsample, ptr %77, align 8
  %78 = load ptr, ptr %3, align 8
  %79 = getelementptr inbounds %struct.my_downsampler, ptr %78, i32 0, i32 0
  %80 = getelementptr inbounds %struct.jpeg_downsampler, ptr %79, i32 0, i32 2
  store i32 1, ptr %80, align 8
  br label %87

81:                                               ; preds = %67
  %82 = load ptr, ptr %3, align 8
  %83 = getelementptr inbounds %struct.my_downsampler, ptr %82, i32 0, i32 1
  %84 = load i32, ptr %4, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [10 x ptr], ptr %83, i64 0, i64 %85
  store ptr @fullsize_downsample, ptr %86, align 8
  br label %87

87:                                               ; preds = %81, %72
  br label %188

88:                                               ; preds = %59, %51
  %89 = load ptr, ptr %5, align 8
  %90 = getelementptr inbounds %struct.jpeg_component_info, ptr %89, i32 0, i32 2
  %91 = load i32, ptr %90, align 8
  %92 = mul nsw i32 %91, 2
  %93 = load ptr, ptr %2, align 8
  %94 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %93, i32 0, i32 38
  %95 = load i32, ptr %94, align 8
  %96 = icmp eq i32 %92, %95
  br i1 %96, label %97, label %111

97:                                               ; preds = %88
  %98 = load ptr, ptr %5, align 8
  %99 = getelementptr inbounds %struct.jpeg_component_info, ptr %98, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = load ptr, ptr %2, align 8
  %102 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %101, i32 0, i32 39
  %103 = load i32, ptr %102, align 4
  %104 = icmp eq i32 %100, %103
  br i1 %104, label %105, label %111

105:                                              ; preds = %97
  store i32 0, ptr %6, align 4
  %106 = load ptr, ptr %3, align 8
  %107 = getelementptr inbounds %struct.my_downsampler, ptr %106, i32 0, i32 1
  %108 = load i32, ptr %4, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [10 x ptr], ptr %107, i64 0, i64 %109
  store ptr @h2v1_downsample, ptr %110, align 8
  br label %187

111:                                              ; preds = %97, %88
  %112 = load ptr, ptr %5, align 8
  %113 = getelementptr inbounds %struct.jpeg_component_info, ptr %112, i32 0, i32 2
  %114 = load i32, ptr %113, align 8
  %115 = mul nsw i32 %114, 2
  %116 = load ptr, ptr %2, align 8
  %117 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %116, i32 0, i32 38
  %118 = load i32, ptr %117, align 8
  %119 = icmp eq i32 %115, %118
  br i1 %119, label %120, label %150

120:                                              ; preds = %111
  %121 = load ptr, ptr %5, align 8
  %122 = getelementptr inbounds %struct.jpeg_component_info, ptr %121, i32 0, i32 3
  %123 = load i32, ptr %122, align 4
  %124 = mul nsw i32 %123, 2
  %125 = load ptr, ptr %2, align 8
  %126 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %125, i32 0, i32 39
  %127 = load i32, ptr %126, align 4
  %128 = icmp eq i32 %124, %127
  br i1 %128, label %129, label %150

129:                                              ; preds = %120
  %130 = load ptr, ptr %2, align 8
  %131 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %130, i32 0, i32 27
  %132 = load i32, ptr %131, align 8
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %134, label %143

134:                                              ; preds = %129
  %135 = load ptr, ptr %3, align 8
  %136 = getelementptr inbounds %struct.my_downsampler, ptr %135, i32 0, i32 1
  %137 = load i32, ptr %4, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [10 x ptr], ptr %136, i64 0, i64 %138
  store ptr @h2v2_smooth_downsample, ptr %139, align 8
  %140 = load ptr, ptr %3, align 8
  %141 = getelementptr inbounds %struct.my_downsampler, ptr %140, i32 0, i32 0
  %142 = getelementptr inbounds %struct.jpeg_downsampler, ptr %141, i32 0, i32 2
  store i32 1, ptr %142, align 8
  br label %149

143:                                              ; preds = %129
  %144 = load ptr, ptr %3, align 8
  %145 = getelementptr inbounds %struct.my_downsampler, ptr %144, i32 0, i32 1
  %146 = load i32, ptr %4, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds [10 x ptr], ptr %145, i64 0, i64 %147
  store ptr @h2v2_downsample, ptr %148, align 8
  br label %149

149:                                              ; preds = %143, %134
  br label %186

150:                                              ; preds = %120, %111
  %151 = load ptr, ptr %2, align 8
  %152 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %151, i32 0, i32 38
  %153 = load i32, ptr %152, align 8
  %154 = load ptr, ptr %5, align 8
  %155 = getelementptr inbounds %struct.jpeg_component_info, ptr %154, i32 0, i32 2
  %156 = load i32, ptr %155, align 8
  %157 = srem i32 %153, %156
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %174

159:                                              ; preds = %150
  %160 = load ptr, ptr %2, align 8
  %161 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %160, i32 0, i32 39
  %162 = load i32, ptr %161, align 4
  %163 = load ptr, ptr %5, align 8
  %164 = getelementptr inbounds %struct.jpeg_component_info, ptr %163, i32 0, i32 3
  %165 = load i32, ptr %164, align 4
  %166 = srem i32 %162, %165
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %174

168:                                              ; preds = %159
  store i32 0, ptr %6, align 4
  %169 = load ptr, ptr %3, align 8
  %170 = getelementptr inbounds %struct.my_downsampler, ptr %169, i32 0, i32 1
  %171 = load i32, ptr %4, align 4
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds [10 x ptr], ptr %170, i64 0, i64 %172
  store ptr @int_downsample, ptr %173, align 8
  br label %185

174:                                              ; preds = %159, %150
  %175 = load ptr, ptr %2, align 8
  %176 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %175, i32 0, i32 0
  %177 = load ptr, ptr %176, align 8
  %178 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %177, i32 0, i32 5
  store i32 37, ptr %178, align 8
  %179 = load ptr, ptr %2, align 8
  %180 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %179, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %182 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %181, i32 0, i32 0
  %183 = load ptr, ptr %182, align 8
  %184 = load ptr, ptr %2, align 8
  call void %183(ptr noundef %184)
  br label %185

185:                                              ; preds = %174, %168
  br label %186

186:                                              ; preds = %185, %149
  br label %187

187:                                              ; preds = %186, %105
  br label %188

188:                                              ; preds = %187, %87
  br label %189

189:                                              ; preds = %188
  %190 = load i32, ptr %4, align 4
  %191 = add nsw i32 %190, 1
  store i32 %191, ptr %4, align 4
  %192 = load ptr, ptr %5, align 8
  %193 = getelementptr inbounds %struct.jpeg_component_info, ptr %192, i32 1
  store ptr %193, ptr %5, align 8
  br label %45, !llvm.loop !6

194:                                              ; preds = %45
  %195 = load ptr, ptr %2, align 8
  %196 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %195, i32 0, i32 27
  %197 = load i32, ptr %196, align 8
  %198 = icmp ne i32 %197, 0
  br i1 %198, label %199, label %213

199:                                              ; preds = %194
  %200 = load i32, ptr %6, align 4
  %201 = icmp ne i32 %200, 0
  br i1 %201, label %213, label %202

202:                                              ; preds = %199
  %203 = load ptr, ptr %2, align 8
  %204 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %203, i32 0, i32 0
  %205 = load ptr, ptr %204, align 8
  %206 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %205, i32 0, i32 5
  store i32 98, ptr %206, align 8
  %207 = load ptr, ptr %2, align 8
  %208 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %207, i32 0, i32 0
  %209 = load ptr, ptr %208, align 8
  %210 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %209, i32 0, i32 1
  %211 = load ptr, ptr %210, align 8
  %212 = load ptr, ptr %2, align 8
  call void %211(ptr noundef %212, i32 noundef 0)
  br label %213

213:                                              ; preds = %202, %199, %194
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @start_pass_downsample(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @sep_downsample(ptr noundef %0, ptr noundef %1, i32 noundef %2, ptr noundef %3, i32 noundef %4) #0 {
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca i32, align 4
  %11 = alloca ptr, align 8
  %12 = alloca i32, align 4
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  store ptr %0, ptr %6, align 8
  store ptr %1, ptr %7, align 8
  store i32 %2, ptr %8, align 4
  store ptr %3, ptr %9, align 8
  store i32 %4, ptr %10, align 4
  %16 = load ptr, ptr %6, align 8
  %17 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %16, i32 0, i32 57
  %18 = load ptr, ptr %17, align 8
  store ptr %18, ptr %11, align 8
  store i32 0, ptr %12, align 4
  %19 = load ptr, ptr %6, align 8
  %20 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %19, i32 0, i32 14
  %21 = load ptr, ptr %20, align 8
  store ptr %21, ptr %13, align 8
  br label %22

22:                                               ; preds = %59, %5
  %23 = load i32, ptr %12, align 4
  %24 = load ptr, ptr %6, align 8
  %25 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %24, i32 0, i32 12
  %26 = load i32, ptr %25, align 4
  %27 = icmp slt i32 %23, %26
  br i1 %27, label %28, label %64

28:                                               ; preds = %22
  %29 = load ptr, ptr %7, align 8
  %30 = load i32, ptr %12, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds ptr, ptr %29, i64 %31
  %33 = load ptr, ptr %32, align 8
  %34 = load i32, ptr %8, align 4
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds ptr, ptr %33, i64 %35
  store ptr %36, ptr %14, align 8
  %37 = load ptr, ptr %9, align 8
  %38 = load i32, ptr %12, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds ptr, ptr %37, i64 %39
  %41 = load ptr, ptr %40, align 8
  %42 = load i32, ptr %10, align 4
  %43 = load ptr, ptr %13, align 8
  %44 = getelementptr inbounds %struct.jpeg_component_info, ptr %43, i32 0, i32 3
  %45 = load i32, ptr %44, align 4
  %46 = mul i32 %42, %45
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds ptr, ptr %41, i64 %47
  store ptr %48, ptr %15, align 8
  %49 = load ptr, ptr %11, align 8
  %50 = getelementptr inbounds %struct.my_downsampler, ptr %49, i32 0, i32 1
  %51 = load i32, ptr %12, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [10 x ptr], ptr %50, i64 0, i64 %52
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %6, align 8
  %56 = load ptr, ptr %13, align 8
  %57 = load ptr, ptr %14, align 8
  %58 = load ptr, ptr %15, align 8
  call void %54(ptr noundef %55, ptr noundef %56, ptr noundef %57, ptr noundef %58)
  br label %59

59:                                               ; preds = %28
  %60 = load i32, ptr %12, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, ptr %12, align 4
  %62 = load ptr, ptr %13, align 8
  %63 = getelementptr inbounds %struct.jpeg_component_info, ptr %62, i32 1
  store ptr %63, ptr %13, align 8
  br label %22, !llvm.loop !8

64:                                               ; preds = %22
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @fullsize_smooth_downsample(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  store ptr %0, ptr %5, align 8
  store ptr %1, ptr %6, align 8
  store ptr %2, ptr %7, align 8
  store ptr %3, ptr %8, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = getelementptr inbounds %struct.jpeg_component_info, ptr %23, i32 0, i32 7
  %25 = load i32, ptr %24, align 4
  %26 = mul i32 %25, 8
  store i32 %26, ptr %11, align 4
  %27 = load ptr, ptr %7, align 8
  %28 = getelementptr inbounds ptr, ptr %27, i64 -1
  %29 = load ptr, ptr %5, align 8
  %30 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %29, i32 0, i32 39
  %31 = load i32, ptr %30, align 4
  %32 = add nsw i32 %31, 2
  %33 = load ptr, ptr %5, align 8
  %34 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %33, i32 0, i32 6
  %35 = load i32, ptr %34, align 8
  %36 = load i32, ptr %11, align 4
  call void @expand_right_edge(ptr noundef %28, i32 noundef %32, i32 noundef %35, i32 noundef %36)
  %37 = load ptr, ptr %5, align 8
  %38 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %37, i32 0, i32 27
  %39 = load i32, ptr %38, align 8
  %40 = sext i32 %39 to i64
  %41 = mul nsw i64 %40, 512
  %42 = sub nsw i64 65536, %41
  store i64 %42, ptr %18, align 8
  %43 = load ptr, ptr %5, align 8
  %44 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %43, i32 0, i32 27
  %45 = load i32, ptr %44, align 8
  %46 = mul nsw i32 %45, 64
  %47 = sext i32 %46 to i64
  store i64 %47, ptr %19, align 8
  store i32 0, ptr %9, align 4
  br label %48

48:                                               ; preds = %212, %4
  %49 = load i32, ptr %9, align 4
  %50 = load ptr, ptr %6, align 8
  %51 = getelementptr inbounds %struct.jpeg_component_info, ptr %50, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = icmp slt i32 %49, %52
  br i1 %53, label %54, label %215

54:                                               ; preds = %48
  %55 = load ptr, ptr %8, align 8
  %56 = load i32, ptr %9, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds ptr, ptr %55, i64 %57
  %59 = load ptr, ptr %58, align 8
  store ptr %59, ptr %15, align 8
  %60 = load ptr, ptr %7, align 8
  %61 = load i32, ptr %9, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds ptr, ptr %60, i64 %62
  %64 = load ptr, ptr %63, align 8
  store ptr %64, ptr %12, align 8
  %65 = load ptr, ptr %7, align 8
  %66 = load i32, ptr %9, align 4
  %67 = sub nsw i32 %66, 1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds ptr, ptr %65, i64 %68
  %70 = load ptr, ptr %69, align 8
  store ptr %70, ptr %13, align 8
  %71 = load ptr, ptr %7, align 8
  %72 = load i32, ptr %9, align 4
  %73 = add nsw i32 %72, 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds ptr, ptr %71, i64 %74
  %76 = load ptr, ptr %75, align 8
  store ptr %76, ptr %14, align 8
  %77 = load ptr, ptr %13, align 8
  %78 = getelementptr inbounds i8, ptr %77, i32 1
  store ptr %78, ptr %13, align 8
  %79 = load i8, ptr %77, align 1
  %80 = zext i8 %79 to i32
  %81 = load ptr, ptr %14, align 8
  %82 = getelementptr inbounds i8, ptr %81, i32 1
  store ptr %82, ptr %14, align 8
  %83 = load i8, ptr %81, align 1
  %84 = zext i8 %83 to i32
  %85 = add nsw i32 %80, %84
  %86 = load ptr, ptr %12, align 8
  %87 = load i8, ptr %86, align 1
  %88 = zext i8 %87 to i32
  %89 = add nsw i32 %85, %88
  store i32 %89, ptr %20, align 4
  %90 = load ptr, ptr %12, align 8
  %91 = getelementptr inbounds i8, ptr %90, i32 1
  store ptr %91, ptr %12, align 8
  %92 = load i8, ptr %90, align 1
  %93 = zext i8 %92 to i32
  %94 = sext i32 %93 to i64
  store i64 %94, ptr %16, align 8
  %95 = load ptr, ptr %13, align 8
  %96 = load i8, ptr %95, align 1
  %97 = zext i8 %96 to i32
  %98 = load ptr, ptr %14, align 8
  %99 = load i8, ptr %98, align 1
  %100 = zext i8 %99 to i32
  %101 = add nsw i32 %97, %100
  %102 = load ptr, ptr %12, align 8
  %103 = load i8, ptr %102, align 1
  %104 = zext i8 %103 to i32
  %105 = add nsw i32 %101, %104
  store i32 %105, ptr %22, align 4
  %106 = load i32, ptr %20, align 4
  %107 = sext i32 %106 to i64
  %108 = load i32, ptr %20, align 4
  %109 = sext i32 %108 to i64
  %110 = load i64, ptr %16, align 8
  %111 = sub nsw i64 %109, %110
  %112 = add nsw i64 %107, %111
  %113 = load i32, ptr %22, align 4
  %114 = sext i32 %113 to i64
  %115 = add nsw i64 %112, %114
  store i64 %115, ptr %17, align 8
  %116 = load i64, ptr %16, align 8
  %117 = load i64, ptr %18, align 8
  %118 = mul nsw i64 %116, %117
  %119 = load i64, ptr %17, align 8
  %120 = load i64, ptr %19, align 8
  %121 = mul nsw i64 %119, %120
  %122 = add nsw i64 %118, %121
  store i64 %122, ptr %16, align 8
  %123 = load i64, ptr %16, align 8
  %124 = add nsw i64 %123, 32768
  %125 = ashr i64 %124, 16
  %126 = trunc i64 %125 to i8
  %127 = load ptr, ptr %15, align 8
  %128 = getelementptr inbounds i8, ptr %127, i32 1
  store ptr %128, ptr %15, align 8
  store i8 %126, ptr %127, align 1
  %129 = load i32, ptr %20, align 4
  store i32 %129, ptr %21, align 4
  %130 = load i32, ptr %22, align 4
  store i32 %130, ptr %20, align 4
  %131 = load i32, ptr %11, align 4
  %132 = sub i32 %131, 2
  store i32 %132, ptr %10, align 4
  br label %133

133:                                              ; preds = %182, %54
  %134 = load i32, ptr %10, align 4
  %135 = icmp ugt i32 %134, 0
  br i1 %135, label %136, label %185

136:                                              ; preds = %133
  %137 = load ptr, ptr %12, align 8
  %138 = getelementptr inbounds i8, ptr %137, i32 1
  store ptr %138, ptr %12, align 8
  %139 = load i8, ptr %137, align 1
  %140 = zext i8 %139 to i32
  %141 = sext i32 %140 to i64
  store i64 %141, ptr %16, align 8
  %142 = load ptr, ptr %13, align 8
  %143 = getelementptr inbounds i8, ptr %142, i32 1
  store ptr %143, ptr %13, align 8
  %144 = load ptr, ptr %14, align 8
  %145 = getelementptr inbounds i8, ptr %144, i32 1
  store ptr %145, ptr %14, align 8
  %146 = load ptr, ptr %13, align 8
  %147 = load i8, ptr %146, align 1
  %148 = zext i8 %147 to i32
  %149 = load ptr, ptr %14, align 8
  %150 = load i8, ptr %149, align 1
  %151 = zext i8 %150 to i32
  %152 = add nsw i32 %148, %151
  %153 = load ptr, ptr %12, align 8
  %154 = load i8, ptr %153, align 1
  %155 = zext i8 %154 to i32
  %156 = add nsw i32 %152, %155
  store i32 %156, ptr %22, align 4
  %157 = load i32, ptr %21, align 4
  %158 = sext i32 %157 to i64
  %159 = load i32, ptr %20, align 4
  %160 = sext i32 %159 to i64
  %161 = load i64, ptr %16, align 8
  %162 = sub nsw i64 %160, %161
  %163 = add nsw i64 %158, %162
  %164 = load i32, ptr %22, align 4
  %165 = sext i32 %164 to i64
  %166 = add nsw i64 %163, %165
  store i64 %166, ptr %17, align 8
  %167 = load i64, ptr %16, align 8
  %168 = load i64, ptr %18, align 8
  %169 = mul nsw i64 %167, %168
  %170 = load i64, ptr %17, align 8
  %171 = load i64, ptr %19, align 8
  %172 = mul nsw i64 %170, %171
  %173 = add nsw i64 %169, %172
  store i64 %173, ptr %16, align 8
  %174 = load i64, ptr %16, align 8
  %175 = add nsw i64 %174, 32768
  %176 = ashr i64 %175, 16
  %177 = trunc i64 %176 to i8
  %178 = load ptr, ptr %15, align 8
  %179 = getelementptr inbounds i8, ptr %178, i32 1
  store ptr %179, ptr %15, align 8
  store i8 %177, ptr %178, align 1
  %180 = load i32, ptr %20, align 4
  store i32 %180, ptr %21, align 4
  %181 = load i32, ptr %22, align 4
  store i32 %181, ptr %20, align 4
  br label %182

182:                                              ; preds = %136
  %183 = load i32, ptr %10, align 4
  %184 = add i32 %183, -1
  store i32 %184, ptr %10, align 4
  br label %133, !llvm.loop !9

185:                                              ; preds = %133
  %186 = load ptr, ptr %12, align 8
  %187 = load i8, ptr %186, align 1
  %188 = zext i8 %187 to i32
  %189 = sext i32 %188 to i64
  store i64 %189, ptr %16, align 8
  %190 = load i32, ptr %21, align 4
  %191 = sext i32 %190 to i64
  %192 = load i32, ptr %20, align 4
  %193 = sext i32 %192 to i64
  %194 = load i64, ptr %16, align 8
  %195 = sub nsw i64 %193, %194
  %196 = add nsw i64 %191, %195
  %197 = load i32, ptr %20, align 4
  %198 = sext i32 %197 to i64
  %199 = add nsw i64 %196, %198
  store i64 %199, ptr %17, align 8
  %200 = load i64, ptr %16, align 8
  %201 = load i64, ptr %18, align 8
  %202 = mul nsw i64 %200, %201
  %203 = load i64, ptr %17, align 8
  %204 = load i64, ptr %19, align 8
  %205 = mul nsw i64 %203, %204
  %206 = add nsw i64 %202, %205
  store i64 %206, ptr %16, align 8
  %207 = load i64, ptr %16, align 8
  %208 = add nsw i64 %207, 32768
  %209 = ashr i64 %208, 16
  %210 = trunc i64 %209 to i8
  %211 = load ptr, ptr %15, align 8
  store i8 %210, ptr %211, align 1
  br label %212

212:                                              ; preds = %185
  %213 = load i32, ptr %9, align 4
  %214 = add nsw i32 %213, 1
  store i32 %214, ptr %9, align 4
  br label %48, !llvm.loop !10

215:                                              ; preds = %48
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @fullsize_downsample(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store ptr %0, ptr %5, align 8
  store ptr %1, ptr %6, align 8
  store ptr %2, ptr %7, align 8
  store ptr %3, ptr %8, align 8
  %9 = load ptr, ptr %7, align 8
  %10 = load ptr, ptr %8, align 8
  %11 = load ptr, ptr %5, align 8
  %12 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %11, i32 0, i32 39
  %13 = load i32, ptr %12, align 4
  %14 = load ptr, ptr %5, align 8
  %15 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %14, i32 0, i32 6
  %16 = load i32, ptr %15, align 8
  call void @jcopy_sample_rows(ptr noundef %9, i32 noundef 0, ptr noundef %10, i32 noundef 0, i32 noundef %13, i32 noundef %16)
  %17 = load ptr, ptr %8, align 8
  %18 = load ptr, ptr %5, align 8
  %19 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %18, i32 0, i32 39
  %20 = load i32, ptr %19, align 4
  %21 = load ptr, ptr %5, align 8
  %22 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %21, i32 0, i32 6
  %23 = load i32, ptr %22, align 8
  %24 = load ptr, ptr %6, align 8
  %25 = getelementptr inbounds %struct.jpeg_component_info, ptr %24, i32 0, i32 7
  %26 = load i32, ptr %25, align 4
  %27 = mul i32 %26, 8
  call void @expand_right_edge(ptr noundef %17, i32 noundef %20, i32 noundef %23, i32 noundef %27)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @h2v1_downsample(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  store ptr %0, ptr %5, align 8
  store ptr %1, ptr %6, align 8
  store ptr %2, ptr %7, align 8
  store ptr %3, ptr %8, align 8
  %15 = load ptr, ptr %6, align 8
  %16 = getelementptr inbounds %struct.jpeg_component_info, ptr %15, i32 0, i32 7
  %17 = load i32, ptr %16, align 4
  %18 = mul i32 %17, 8
  store i32 %18, ptr %11, align 4
  %19 = load ptr, ptr %7, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %20, i32 0, i32 39
  %22 = load i32, ptr %21, align 4
  %23 = load ptr, ptr %5, align 8
  %24 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %23, i32 0, i32 6
  %25 = load i32, ptr %24, align 8
  %26 = load i32, ptr %11, align 4
  %27 = mul i32 %26, 2
  call void @expand_right_edge(ptr noundef %19, i32 noundef %22, i32 noundef %25, i32 noundef %27)
  store i32 0, ptr %9, align 4
  br label %28

28:                                               ; preds = %72, %4
  %29 = load i32, ptr %9, align 4
  %30 = load ptr, ptr %6, align 8
  %31 = getelementptr inbounds %struct.jpeg_component_info, ptr %30, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = icmp slt i32 %29, %32
  br i1 %33, label %34, label %75

34:                                               ; preds = %28
  %35 = load ptr, ptr %8, align 8
  %36 = load i32, ptr %9, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds ptr, ptr %35, i64 %37
  %39 = load ptr, ptr %38, align 8
  store ptr %39, ptr %13, align 8
  %40 = load ptr, ptr %7, align 8
  %41 = load i32, ptr %9, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds ptr, ptr %40, i64 %42
  %44 = load ptr, ptr %43, align 8
  store ptr %44, ptr %12, align 8
  store i32 0, ptr %14, align 4
  store i32 0, ptr %10, align 4
  br label %45

45:                                               ; preds = %68, %34
  %46 = load i32, ptr %10, align 4
  %47 = load i32, ptr %11, align 4
  %48 = icmp ult i32 %46, %47
  br i1 %48, label %49, label %71

49:                                               ; preds = %45
  %50 = load ptr, ptr %12, align 8
  %51 = load i8, ptr %50, align 1
  %52 = zext i8 %51 to i32
  %53 = load ptr, ptr %12, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 1
  %55 = load i8, ptr %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nsw i32 %52, %56
  %58 = load i32, ptr %14, align 4
  %59 = add nsw i32 %57, %58
  %60 = ashr i32 %59, 1
  %61 = trunc i32 %60 to i8
  %62 = load ptr, ptr %13, align 8
  %63 = getelementptr inbounds i8, ptr %62, i32 1
  store ptr %63, ptr %13, align 8
  store i8 %61, ptr %62, align 1
  %64 = load i32, ptr %14, align 4
  %65 = xor i32 %64, 1
  store i32 %65, ptr %14, align 4
  %66 = load ptr, ptr %12, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 2
  store ptr %67, ptr %12, align 8
  br label %68

68:                                               ; preds = %49
  %69 = load i32, ptr %10, align 4
  %70 = add i32 %69, 1
  store i32 %70, ptr %10, align 4
  br label %45, !llvm.loop !11

71:                                               ; preds = %45
  br label %72

72:                                               ; preds = %71
  %73 = load i32, ptr %9, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, ptr %9, align 4
  br label %28, !llvm.loop !12

75:                                               ; preds = %28
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @h2v2_smooth_downsample(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  store ptr %0, ptr %5, align 8
  store ptr %1, ptr %6, align 8
  store ptr %2, ptr %7, align 8
  store ptr %3, ptr %8, align 8
  %22 = load ptr, ptr %6, align 8
  %23 = getelementptr inbounds %struct.jpeg_component_info, ptr %22, i32 0, i32 7
  %24 = load i32, ptr %23, align 4
  %25 = mul i32 %24, 8
  store i32 %25, ptr %12, align 4
  %26 = load ptr, ptr %7, align 8
  %27 = getelementptr inbounds ptr, ptr %26, i64 -1
  %28 = load ptr, ptr %5, align 8
  %29 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %28, i32 0, i32 39
  %30 = load i32, ptr %29, align 4
  %31 = add nsw i32 %30, 2
  %32 = load ptr, ptr %5, align 8
  %33 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %32, i32 0, i32 6
  %34 = load i32, ptr %33, align 8
  %35 = load i32, ptr %12, align 4
  %36 = mul i32 %35, 2
  call void @expand_right_edge(ptr noundef %27, i32 noundef %31, i32 noundef %34, i32 noundef %36)
  %37 = load ptr, ptr %5, align 8
  %38 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %37, i32 0, i32 27
  %39 = load i32, ptr %38, align 8
  %40 = mul nsw i32 %39, 80
  %41 = sub nsw i32 16384, %40
  %42 = sext i32 %41 to i64
  store i64 %42, ptr %20, align 8
  %43 = load ptr, ptr %5, align 8
  %44 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %43, i32 0, i32 27
  %45 = load i32, ptr %44, align 8
  %46 = mul nsw i32 %45, 16
  %47 = sext i32 %46 to i64
  store i64 %47, ptr %21, align 8
  store i32 0, ptr %9, align 4
  store i32 0, ptr %10, align 4
  br label %48

48:                                               ; preds = %388, %4
  %49 = load i32, ptr %10, align 4
  %50 = load ptr, ptr %6, align 8
  %51 = getelementptr inbounds %struct.jpeg_component_info, ptr %50, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = icmp slt i32 %49, %52
  br i1 %53, label %54, label %391

54:                                               ; preds = %48
  %55 = load ptr, ptr %8, align 8
  %56 = load i32, ptr %10, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds ptr, ptr %55, i64 %57
  %59 = load ptr, ptr %58, align 8
  store ptr %59, ptr %17, align 8
  %60 = load ptr, ptr %7, align 8
  %61 = load i32, ptr %9, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds ptr, ptr %60, i64 %62
  %64 = load ptr, ptr %63, align 8
  store ptr %64, ptr %13, align 8
  %65 = load ptr, ptr %7, align 8
  %66 = load i32, ptr %9, align 4
  %67 = add nsw i32 %66, 1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds ptr, ptr %65, i64 %68
  %70 = load ptr, ptr %69, align 8
  store ptr %70, ptr %14, align 8
  %71 = load ptr, ptr %7, align 8
  %72 = load i32, ptr %9, align 4
  %73 = sub nsw i32 %72, 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds ptr, ptr %71, i64 %74
  %76 = load ptr, ptr %75, align 8
  store ptr %76, ptr %15, align 8
  %77 = load ptr, ptr %7, align 8
  %78 = load i32, ptr %9, align 4
  %79 = add nsw i32 %78, 2
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds ptr, ptr %77, i64 %80
  %82 = load ptr, ptr %81, align 8
  store ptr %82, ptr %16, align 8
  %83 = load ptr, ptr %13, align 8
  %84 = load i8, ptr %83, align 1
  %85 = zext i8 %84 to i32
  %86 = load ptr, ptr %13, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 1
  %88 = load i8, ptr %87, align 1
  %89 = zext i8 %88 to i32
  %90 = add nsw i32 %85, %89
  %91 = load ptr, ptr %14, align 8
  %92 = load i8, ptr %91, align 1
  %93 = zext i8 %92 to i32
  %94 = add nsw i32 %90, %93
  %95 = load ptr, ptr %14, align 8
  %96 = getelementptr inbounds i8, ptr %95, i64 1
  %97 = load i8, ptr %96, align 1
  %98 = zext i8 %97 to i32
  %99 = add nsw i32 %94, %98
  %100 = sext i32 %99 to i64
  store i64 %100, ptr %18, align 8
  %101 = load ptr, ptr %15, align 8
  %102 = load i8, ptr %101, align 1
  %103 = zext i8 %102 to i32
  %104 = load ptr, ptr %15, align 8
  %105 = getelementptr inbounds i8, ptr %104, i64 1
  %106 = load i8, ptr %105, align 1
  %107 = zext i8 %106 to i32
  %108 = add nsw i32 %103, %107
  %109 = load ptr, ptr %16, align 8
  %110 = load i8, ptr %109, align 1
  %111 = zext i8 %110 to i32
  %112 = add nsw i32 %108, %111
  %113 = load ptr, ptr %16, align 8
  %114 = getelementptr inbounds i8, ptr %113, i64 1
  %115 = load i8, ptr %114, align 1
  %116 = zext i8 %115 to i32
  %117 = add nsw i32 %112, %116
  %118 = load ptr, ptr %13, align 8
  %119 = load i8, ptr %118, align 1
  %120 = zext i8 %119 to i32
  %121 = add nsw i32 %117, %120
  %122 = load ptr, ptr %13, align 8
  %123 = getelementptr inbounds i8, ptr %122, i64 2
  %124 = load i8, ptr %123, align 1
  %125 = zext i8 %124 to i32
  %126 = add nsw i32 %121, %125
  %127 = load ptr, ptr %14, align 8
  %128 = load i8, ptr %127, align 1
  %129 = zext i8 %128 to i32
  %130 = add nsw i32 %126, %129
  %131 = load ptr, ptr %14, align 8
  %132 = getelementptr inbounds i8, ptr %131, i64 2
  %133 = load i8, ptr %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add nsw i32 %130, %134
  %136 = sext i32 %135 to i64
  store i64 %136, ptr %19, align 8
  %137 = load i64, ptr %19, align 8
  %138 = load i64, ptr %19, align 8
  %139 = add nsw i64 %138, %137
  store i64 %139, ptr %19, align 8
  %140 = load ptr, ptr %15, align 8
  %141 = load i8, ptr %140, align 1
  %142 = zext i8 %141 to i32
  %143 = load ptr, ptr %15, align 8
  %144 = getelementptr inbounds i8, ptr %143, i64 2
  %145 = load i8, ptr %144, align 1
  %146 = zext i8 %145 to i32
  %147 = add nsw i32 %142, %146
  %148 = load ptr, ptr %16, align 8
  %149 = load i8, ptr %148, align 1
  %150 = zext i8 %149 to i32
  %151 = add nsw i32 %147, %150
  %152 = load ptr, ptr %16, align 8
  %153 = getelementptr inbounds i8, ptr %152, i64 2
  %154 = load i8, ptr %153, align 1
  %155 = zext i8 %154 to i32
  %156 = add nsw i32 %151, %155
  %157 = sext i32 %156 to i64
  %158 = load i64, ptr %19, align 8
  %159 = add nsw i64 %158, %157
  store i64 %159, ptr %19, align 8
  %160 = load i64, ptr %18, align 8
  %161 = load i64, ptr %20, align 8
  %162 = mul nsw i64 %160, %161
  %163 = load i64, ptr %19, align 8
  %164 = load i64, ptr %21, align 8
  %165 = mul nsw i64 %163, %164
  %166 = add nsw i64 %162, %165
  store i64 %166, ptr %18, align 8
  %167 = load i64, ptr %18, align 8
  %168 = add nsw i64 %167, 32768
  %169 = ashr i64 %168, 16
  %170 = trunc i64 %169 to i8
  %171 = load ptr, ptr %17, align 8
  %172 = getelementptr inbounds i8, ptr %171, i32 1
  store ptr %172, ptr %17, align 8
  store i8 %170, ptr %171, align 1
  %173 = load ptr, ptr %13, align 8
  %174 = getelementptr inbounds i8, ptr %173, i64 2
  store ptr %174, ptr %13, align 8
  %175 = load ptr, ptr %14, align 8
  %176 = getelementptr inbounds i8, ptr %175, i64 2
  store ptr %176, ptr %14, align 8
  %177 = load ptr, ptr %15, align 8
  %178 = getelementptr inbounds i8, ptr %177, i64 2
  store ptr %178, ptr %15, align 8
  %179 = load ptr, ptr %16, align 8
  %180 = getelementptr inbounds i8, ptr %179, i64 2
  store ptr %180, ptr %16, align 8
  %181 = load i32, ptr %12, align 4
  %182 = sub i32 %181, 2
  store i32 %182, ptr %11, align 4
  br label %183

183:                                              ; preds = %289, %54
  %184 = load i32, ptr %11, align 4
  %185 = icmp ugt i32 %184, 0
  br i1 %185, label %186, label %292

186:                                              ; preds = %183
  %187 = load ptr, ptr %13, align 8
  %188 = load i8, ptr %187, align 1
  %189 = zext i8 %188 to i32
  %190 = load ptr, ptr %13, align 8
  %191 = getelementptr inbounds i8, ptr %190, i64 1
  %192 = load i8, ptr %191, align 1
  %193 = zext i8 %192 to i32
  %194 = add nsw i32 %189, %193
  %195 = load ptr, ptr %14, align 8
  %196 = load i8, ptr %195, align 1
  %197 = zext i8 %196 to i32
  %198 = add nsw i32 %194, %197
  %199 = load ptr, ptr %14, align 8
  %200 = getelementptr inbounds i8, ptr %199, i64 1
  %201 = load i8, ptr %200, align 1
  %202 = zext i8 %201 to i32
  %203 = add nsw i32 %198, %202
  %204 = sext i32 %203 to i64
  store i64 %204, ptr %18, align 8
  %205 = load ptr, ptr %15, align 8
  %206 = load i8, ptr %205, align 1
  %207 = zext i8 %206 to i32
  %208 = load ptr, ptr %15, align 8
  %209 = getelementptr inbounds i8, ptr %208, i64 1
  %210 = load i8, ptr %209, align 1
  %211 = zext i8 %210 to i32
  %212 = add nsw i32 %207, %211
  %213 = load ptr, ptr %16, align 8
  %214 = load i8, ptr %213, align 1
  %215 = zext i8 %214 to i32
  %216 = add nsw i32 %212, %215
  %217 = load ptr, ptr %16, align 8
  %218 = getelementptr inbounds i8, ptr %217, i64 1
  %219 = load i8, ptr %218, align 1
  %220 = zext i8 %219 to i32
  %221 = add nsw i32 %216, %220
  %222 = load ptr, ptr %13, align 8
  %223 = getelementptr inbounds i8, ptr %222, i64 -1
  %224 = load i8, ptr %223, align 1
  %225 = zext i8 %224 to i32
  %226 = add nsw i32 %221, %225
  %227 = load ptr, ptr %13, align 8
  %228 = getelementptr inbounds i8, ptr %227, i64 2
  %229 = load i8, ptr %228, align 1
  %230 = zext i8 %229 to i32
  %231 = add nsw i32 %226, %230
  %232 = load ptr, ptr %14, align 8
  %233 = getelementptr inbounds i8, ptr %232, i64 -1
  %234 = load i8, ptr %233, align 1
  %235 = zext i8 %234 to i32
  %236 = add nsw i32 %231, %235
  %237 = load ptr, ptr %14, align 8
  %238 = getelementptr inbounds i8, ptr %237, i64 2
  %239 = load i8, ptr %238, align 1
  %240 = zext i8 %239 to i32
  %241 = add nsw i32 %236, %240
  %242 = sext i32 %241 to i64
  store i64 %242, ptr %19, align 8
  %243 = load i64, ptr %19, align 8
  %244 = load i64, ptr %19, align 8
  %245 = add nsw i64 %244, %243
  store i64 %245, ptr %19, align 8
  %246 = load ptr, ptr %15, align 8
  %247 = getelementptr inbounds i8, ptr %246, i64 -1
  %248 = load i8, ptr %247, align 1
  %249 = zext i8 %248 to i32
  %250 = load ptr, ptr %15, align 8
  %251 = getelementptr inbounds i8, ptr %250, i64 2
  %252 = load i8, ptr %251, align 1
  %253 = zext i8 %252 to i32
  %254 = add nsw i32 %249, %253
  %255 = load ptr, ptr %16, align 8
  %256 = getelementptr inbounds i8, ptr %255, i64 -1
  %257 = load i8, ptr %256, align 1
  %258 = zext i8 %257 to i32
  %259 = add nsw i32 %254, %258
  %260 = load ptr, ptr %16, align 8
  %261 = getelementptr inbounds i8, ptr %260, i64 2
  %262 = load i8, ptr %261, align 1
  %263 = zext i8 %262 to i32
  %264 = add nsw i32 %259, %263
  %265 = sext i32 %264 to i64
  %266 = load i64, ptr %19, align 8
  %267 = add nsw i64 %266, %265
  store i64 %267, ptr %19, align 8
  %268 = load i64, ptr %18, align 8
  %269 = load i64, ptr %20, align 8
  %270 = mul nsw i64 %268, %269
  %271 = load i64, ptr %19, align 8
  %272 = load i64, ptr %21, align 8
  %273 = mul nsw i64 %271, %272
  %274 = add nsw i64 %270, %273
  store i64 %274, ptr %18, align 8
  %275 = load i64, ptr %18, align 8
  %276 = add nsw i64 %275, 32768
  %277 = ashr i64 %276, 16
  %278 = trunc i64 %277 to i8
  %279 = load ptr, ptr %17, align 8
  %280 = getelementptr inbounds i8, ptr %279, i32 1
  store ptr %280, ptr %17, align 8
  store i8 %278, ptr %279, align 1
  %281 = load ptr, ptr %13, align 8
  %282 = getelementptr inbounds i8, ptr %281, i64 2
  store ptr %282, ptr %13, align 8
  %283 = load ptr, ptr %14, align 8
  %284 = getelementptr inbounds i8, ptr %283, i64 2
  store ptr %284, ptr %14, align 8
  %285 = load ptr, ptr %15, align 8
  %286 = getelementptr inbounds i8, ptr %285, i64 2
  store ptr %286, ptr %15, align 8
  %287 = load ptr, ptr %16, align 8
  %288 = getelementptr inbounds i8, ptr %287, i64 2
  store ptr %288, ptr %16, align 8
  br label %289

289:                                              ; preds = %186
  %290 = load i32, ptr %11, align 4
  %291 = add i32 %290, -1
  store i32 %291, ptr %11, align 4
  br label %183, !llvm.loop !13

292:                                              ; preds = %183
  %293 = load ptr, ptr %13, align 8
  %294 = load i8, ptr %293, align 1
  %295 = zext i8 %294 to i32
  %296 = load ptr, ptr %13, align 8
  %297 = getelementptr inbounds i8, ptr %296, i64 1
  %298 = load i8, ptr %297, align 1
  %299 = zext i8 %298 to i32
  %300 = add nsw i32 %295, %299
  %301 = load ptr, ptr %14, align 8
  %302 = load i8, ptr %301, align 1
  %303 = zext i8 %302 to i32
  %304 = add nsw i32 %300, %303
  %305 = load ptr, ptr %14, align 8
  %306 = getelementptr inbounds i8, ptr %305, i64 1
  %307 = load i8, ptr %306, align 1
  %308 = zext i8 %307 to i32
  %309 = add nsw i32 %304, %308
  %310 = sext i32 %309 to i64
  store i64 %310, ptr %18, align 8
  %311 = load ptr, ptr %15, align 8
  %312 = load i8, ptr %311, align 1
  %313 = zext i8 %312 to i32
  %314 = load ptr, ptr %15, align 8
  %315 = getelementptr inbounds i8, ptr %314, i64 1
  %316 = load i8, ptr %315, align 1
  %317 = zext i8 %316 to i32
  %318 = add nsw i32 %313, %317
  %319 = load ptr, ptr %16, align 8
  %320 = load i8, ptr %319, align 1
  %321 = zext i8 %320 to i32
  %322 = add nsw i32 %318, %321
  %323 = load ptr, ptr %16, align 8
  %324 = getelementptr inbounds i8, ptr %323, i64 1
  %325 = load i8, ptr %324, align 1
  %326 = zext i8 %325 to i32
  %327 = add nsw i32 %322, %326
  %328 = load ptr, ptr %13, align 8
  %329 = getelementptr inbounds i8, ptr %328, i64 -1
  %330 = load i8, ptr %329, align 1
  %331 = zext i8 %330 to i32
  %332 = add nsw i32 %327, %331
  %333 = load ptr, ptr %13, align 8
  %334 = getelementptr inbounds i8, ptr %333, i64 1
  %335 = load i8, ptr %334, align 1
  %336 = zext i8 %335 to i32
  %337 = add nsw i32 %332, %336
  %338 = load ptr, ptr %14, align 8
  %339 = getelementptr inbounds i8, ptr %338, i64 -1
  %340 = load i8, ptr %339, align 1
  %341 = zext i8 %340 to i32
  %342 = add nsw i32 %337, %341
  %343 = load ptr, ptr %14, align 8
  %344 = getelementptr inbounds i8, ptr %343, i64 1
  %345 = load i8, ptr %344, align 1
  %346 = zext i8 %345 to i32
  %347 = add nsw i32 %342, %346
  %348 = sext i32 %347 to i64
  store i64 %348, ptr %19, align 8
  %349 = load i64, ptr %19, align 8
  %350 = load i64, ptr %19, align 8
  %351 = add nsw i64 %350, %349
  store i64 %351, ptr %19, align 8
  %352 = load ptr, ptr %15, align 8
  %353 = getelementptr inbounds i8, ptr %352, i64 -1
  %354 = load i8, ptr %353, align 1
  %355 = zext i8 %354 to i32
  %356 = load ptr, ptr %15, align 8
  %357 = getelementptr inbounds i8, ptr %356, i64 1
  %358 = load i8, ptr %357, align 1
  %359 = zext i8 %358 to i32
  %360 = add nsw i32 %355, %359
  %361 = load ptr, ptr %16, align 8
  %362 = getelementptr inbounds i8, ptr %361, i64 -1
  %363 = load i8, ptr %362, align 1
  %364 = zext i8 %363 to i32
  %365 = add nsw i32 %360, %364
  %366 = load ptr, ptr %16, align 8
  %367 = getelementptr inbounds i8, ptr %366, i64 1
  %368 = load i8, ptr %367, align 1
  %369 = zext i8 %368 to i32
  %370 = add nsw i32 %365, %369
  %371 = sext i32 %370 to i64
  %372 = load i64, ptr %19, align 8
  %373 = add nsw i64 %372, %371
  store i64 %373, ptr %19, align 8
  %374 = load i64, ptr %18, align 8
  %375 = load i64, ptr %20, align 8
  %376 = mul nsw i64 %374, %375
  %377 = load i64, ptr %19, align 8
  %378 = load i64, ptr %21, align 8
  %379 = mul nsw i64 %377, %378
  %380 = add nsw i64 %376, %379
  store i64 %380, ptr %18, align 8
  %381 = load i64, ptr %18, align 8
  %382 = add nsw i64 %381, 32768
  %383 = ashr i64 %382, 16
  %384 = trunc i64 %383 to i8
  %385 = load ptr, ptr %17, align 8
  store i8 %384, ptr %385, align 1
  %386 = load i32, ptr %9, align 4
  %387 = add nsw i32 %386, 2
  store i32 %387, ptr %9, align 4
  br label %388

388:                                              ; preds = %292
  %389 = load i32, ptr %10, align 4
  %390 = add nsw i32 %389, 1
  store i32 %390, ptr %10, align 4
  br label %48, !llvm.loop !14

391:                                              ; preds = %48
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @h2v2_downsample(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i32, align 4
  store ptr %0, ptr %5, align 8
  store ptr %1, ptr %6, align 8
  store ptr %2, ptr %7, align 8
  store ptr %3, ptr %8, align 8
  %17 = load ptr, ptr %6, align 8
  %18 = getelementptr inbounds %struct.jpeg_component_info, ptr %17, i32 0, i32 7
  %19 = load i32, ptr %18, align 4
  %20 = mul i32 %19, 8
  store i32 %20, ptr %12, align 4
  %21 = load ptr, ptr %7, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %22, i32 0, i32 39
  %24 = load i32, ptr %23, align 4
  %25 = load ptr, ptr %5, align 8
  %26 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %25, i32 0, i32 6
  %27 = load i32, ptr %26, align 8
  %28 = load i32, ptr %12, align 4
  %29 = mul i32 %28, 2
  call void @expand_right_edge(ptr noundef %21, i32 noundef %24, i32 noundef %27, i32 noundef %29)
  store i32 0, ptr %9, align 4
  store i32 0, ptr %10, align 4
  br label %30

30:                                               ; preds = %93, %4
  %31 = load i32, ptr %10, align 4
  %32 = load ptr, ptr %6, align 8
  %33 = getelementptr inbounds %struct.jpeg_component_info, ptr %32, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = icmp slt i32 %31, %34
  br i1 %35, label %36, label %96

36:                                               ; preds = %30
  %37 = load ptr, ptr %8, align 8
  %38 = load i32, ptr %10, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds ptr, ptr %37, i64 %39
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %15, align 8
  %42 = load ptr, ptr %7, align 8
  %43 = load i32, ptr %9, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds ptr, ptr %42, i64 %44
  %46 = load ptr, ptr %45, align 8
  store ptr %46, ptr %13, align 8
  %47 = load ptr, ptr %7, align 8
  %48 = load i32, ptr %9, align 4
  %49 = add nsw i32 %48, 1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds ptr, ptr %47, i64 %50
  %52 = load ptr, ptr %51, align 8
  store ptr %52, ptr %14, align 8
  store i32 1, ptr %16, align 4
  store i32 0, ptr %11, align 4
  br label %53

53:                                               ; preds = %87, %36
  %54 = load i32, ptr %11, align 4
  %55 = load i32, ptr %12, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %90

57:                                               ; preds = %53
  %58 = load ptr, ptr %13, align 8
  %59 = load i8, ptr %58, align 1
  %60 = zext i8 %59 to i32
  %61 = load ptr, ptr %13, align 8
  %62 = getelementptr inbounds i8, ptr %61, i64 1
  %63 = load i8, ptr %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add nsw i32 %60, %64
  %66 = load ptr, ptr %14, align 8
  %67 = load i8, ptr %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add nsw i32 %65, %68
  %70 = load ptr, ptr %14, align 8
  %71 = getelementptr inbounds i8, ptr %70, i64 1
  %72 = load i8, ptr %71, align 1
  %73 = zext i8 %72 to i32
  %74 = add nsw i32 %69, %73
  %75 = load i32, ptr %16, align 4
  %76 = add nsw i32 %74, %75
  %77 = ashr i32 %76, 2
  %78 = trunc i32 %77 to i8
  %79 = load ptr, ptr %15, align 8
  %80 = getelementptr inbounds i8, ptr %79, i32 1
  store ptr %80, ptr %15, align 8
  store i8 %78, ptr %79, align 1
  %81 = load i32, ptr %16, align 4
  %82 = xor i32 %81, 3
  store i32 %82, ptr %16, align 4
  %83 = load ptr, ptr %13, align 8
  %84 = getelementptr inbounds i8, ptr %83, i64 2
  store ptr %84, ptr %13, align 8
  %85 = load ptr, ptr %14, align 8
  %86 = getelementptr inbounds i8, ptr %85, i64 2
  store ptr %86, ptr %14, align 8
  br label %87

87:                                               ; preds = %57
  %88 = load i32, ptr %11, align 4
  %89 = add i32 %88, 1
  store i32 %89, ptr %11, align 4
  br label %53, !llvm.loop !15

90:                                               ; preds = %53
  %91 = load i32, ptr %9, align 4
  %92 = add nsw i32 %91, 2
  store i32 %92, ptr %9, align 4
  br label %93

93:                                               ; preds = %90
  %94 = load i32, ptr %10, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, ptr %10, align 4
  br label %30, !llvm.loop !16

96:                                               ; preds = %30
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @int_downsample(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca ptr, align 8
  %21 = alloca ptr, align 8
  %22 = alloca i64, align 8
  store ptr %0, ptr %5, align 8
  store ptr %1, ptr %6, align 8
  store ptr %2, ptr %7, align 8
  store ptr %3, ptr %8, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = getelementptr inbounds %struct.jpeg_component_info, ptr %23, i32 0, i32 7
  %25 = load i32, ptr %24, align 4
  %26 = mul i32 %25, 8
  store i32 %26, ptr %19, align 4
  %27 = load ptr, ptr %5, align 8
  %28 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %27, i32 0, i32 38
  %29 = load i32, ptr %28, align 8
  %30 = load ptr, ptr %6, align 8
  %31 = getelementptr inbounds %struct.jpeg_component_info, ptr %30, i32 0, i32 2
  %32 = load i32, ptr %31, align 8
  %33 = sdiv i32 %29, %32
  store i32 %33, ptr %11, align 4
  %34 = load ptr, ptr %5, align 8
  %35 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %34, i32 0, i32 39
  %36 = load i32, ptr %35, align 4
  %37 = load ptr, ptr %6, align 8
  %38 = getelementptr inbounds %struct.jpeg_component_info, ptr %37, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = sdiv i32 %36, %39
  store i32 %40, ptr %12, align 4
  %41 = load i32, ptr %11, align 4
  %42 = load i32, ptr %12, align 4
  %43 = mul nsw i32 %41, %42
  store i32 %43, ptr %13, align 4
  %44 = load i32, ptr %13, align 4
  %45 = sdiv i32 %44, 2
  store i32 %45, ptr %14, align 4
  %46 = load ptr, ptr %7, align 8
  %47 = load ptr, ptr %5, align 8
  %48 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %47, i32 0, i32 39
  %49 = load i32, ptr %48, align 4
  %50 = load ptr, ptr %5, align 8
  %51 = getelementptr inbounds %struct.jpeg_compress_struct, ptr %50, i32 0, i32 6
  %52 = load i32, ptr %51, align 8
  %53 = load i32, ptr %19, align 4
  %54 = load i32, ptr %11, align 4
  %55 = mul i32 %53, %54
  call void @expand_right_edge(ptr noundef %46, i32 noundef %49, i32 noundef %52, i32 noundef %55)
  store i32 0, ptr %9, align 4
  store i32 0, ptr %10, align 4
  br label %56

56:                                               ; preds = %128, %4
  %57 = load i32, ptr %10, align 4
  %58 = load ptr, ptr %6, align 8
  %59 = getelementptr inbounds %struct.jpeg_component_info, ptr %58, i32 0, i32 3
  %60 = load i32, ptr %59, align 4
  %61 = icmp slt i32 %57, %60
  br i1 %61, label %62, label %131

62:                                               ; preds = %56
  %63 = load ptr, ptr %8, align 8
  %64 = load i32, ptr %10, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds ptr, ptr %63, i64 %65
  %67 = load ptr, ptr %66, align 8
  store ptr %67, ptr %21, align 8
  store i32 0, ptr %17, align 4
  store i32 0, ptr %18, align 4
  br label %68

68:                                               ; preds = %118, %62
  %69 = load i32, ptr %17, align 4
  %70 = load i32, ptr %19, align 4
  %71 = icmp ult i32 %69, %70
  br i1 %71, label %72, label %124

72:                                               ; preds = %68
  store i64 0, ptr %22, align 8
  store i32 0, ptr %16, align 4
  br label %73

73:                                               ; preds = %104, %72
  %74 = load i32, ptr %16, align 4
  %75 = load i32, ptr %12, align 4
  %76 = icmp slt i32 %74, %75
  br i1 %76, label %77, label %107

77:                                               ; preds = %73
  %78 = load ptr, ptr %7, align 8
  %79 = load i32, ptr %9, align 4
  %80 = load i32, ptr %16, align 4
  %81 = add nsw i32 %79, %80
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds ptr, ptr %78, i64 %82
  %84 = load ptr, ptr %83, align 8
  %85 = load i32, ptr %18, align 4
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i8, ptr %84, i64 %86
  store ptr %87, ptr %20, align 8
  store i32 0, ptr %15, align 4
  br label %88

88:                                               ; preds = %100, %77
  %89 = load i32, ptr %15, align 4
  %90 = load i32, ptr %11, align 4
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %92, label %103

92:                                               ; preds = %88
  %93 = load ptr, ptr %20, align 8
  %94 = getelementptr inbounds i8, ptr %93, i32 1
  store ptr %94, ptr %20, align 8
  %95 = load i8, ptr %93, align 1
  %96 = zext i8 %95 to i32
  %97 = sext i32 %96 to i64
  %98 = load i64, ptr %22, align 8
  %99 = add nsw i64 %98, %97
  store i64 %99, ptr %22, align 8
  br label %100

100:                                              ; preds = %92
  %101 = load i32, ptr %15, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, ptr %15, align 4
  br label %88, !llvm.loop !17

103:                                              ; preds = %88
  br label %104

104:                                              ; preds = %103
  %105 = load i32, ptr %16, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, ptr %16, align 4
  br label %73, !llvm.loop !18

107:                                              ; preds = %73
  %108 = load i64, ptr %22, align 8
  %109 = load i32, ptr %14, align 4
  %110 = sext i32 %109 to i64
  %111 = add nsw i64 %108, %110
  %112 = load i32, ptr %13, align 4
  %113 = sext i32 %112 to i64
  %114 = sdiv i64 %111, %113
  %115 = trunc i64 %114 to i8
  %116 = load ptr, ptr %21, align 8
  %117 = getelementptr inbounds i8, ptr %116, i32 1
  store ptr %117, ptr %21, align 8
  store i8 %115, ptr %116, align 1
  br label %118

118:                                              ; preds = %107
  %119 = load i32, ptr %17, align 4
  %120 = add i32 %119, 1
  store i32 %120, ptr %17, align 4
  %121 = load i32, ptr %11, align 4
  %122 = load i32, ptr %18, align 4
  %123 = add i32 %122, %121
  store i32 %123, ptr %18, align 4
  br label %68, !llvm.loop !19

124:                                              ; preds = %68
  %125 = load i32, ptr %12, align 4
  %126 = load i32, ptr %9, align 4
  %127 = add nsw i32 %126, %125
  store i32 %127, ptr %9, align 4
  br label %128

128:                                              ; preds = %124
  %129 = load i32, ptr %10, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, ptr %10, align 4
  br label %56, !llvm.loop !20

131:                                              ; preds = %56
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_right_edge(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca i8, align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store ptr %0, ptr %5, align 8
  store i32 %1, ptr %6, align 4
  store i32 %2, ptr %7, align 4
  store i32 %3, ptr %8, align 4
  %14 = load i32, ptr %8, align 4
  %15 = load i32, ptr %7, align 4
  %16 = sub i32 %14, %15
  store i32 %16, ptr %13, align 4
  %17 = load i32, ptr %13, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %52

19:                                               ; preds = %4
  store i32 0, ptr %12, align 4
  br label %20

20:                                               ; preds = %48, %19
  %21 = load i32, ptr %12, align 4
  %22 = load i32, ptr %6, align 4
  %23 = icmp slt i32 %21, %22
  br i1 %23, label %24, label %51

24:                                               ; preds = %20
  %25 = load ptr, ptr %5, align 8
  %26 = load i32, ptr %12, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds ptr, ptr %25, i64 %27
  %29 = load ptr, ptr %28, align 8
  %30 = load i32, ptr %7, align 4
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8, ptr %29, i64 %31
  store ptr %32, ptr %9, align 8
  %33 = load ptr, ptr %9, align 8
  %34 = getelementptr inbounds i8, ptr %33, i64 -1
  %35 = load i8, ptr %34, align 1
  store i8 %35, ptr %10, align 1
  %36 = load i32, ptr %13, align 4
  store i32 %36, ptr %11, align 4
  br label %37

37:                                               ; preds = %44, %24
  %38 = load i32, ptr %11, align 4
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %47

40:                                               ; preds = %37
  %41 = load i8, ptr %10, align 1
  %42 = load ptr, ptr %9, align 8
  %43 = getelementptr inbounds i8, ptr %42, i32 1
  store ptr %43, ptr %9, align 8
  store i8 %41, ptr %42, align 1
  br label %44

44:                                               ; preds = %40
  %45 = load i32, ptr %11, align 4
  %46 = add nsw i32 %45, -1
  store i32 %46, ptr %11, align 4
  br label %37, !llvm.loop !21

47:                                               ; preds = %37
  br label %48

48:                                               ; preds = %47
  %49 = load i32, ptr %12, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, ptr %12, align 4
  br label %20, !llvm.loop !22

51:                                               ; preds = %20
  br label %52

52:                                               ; preds = %51, %4
  ret void
}

declare void @jcopy_sample_rows(ptr noundef, i32 noundef, ptr noundef, i32 noundef, i32 noundef, i32 noundef) #1

attributes #0 = { noinline nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 15.0.7"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !7}
!12 = distinct !{!12, !7}
!13 = distinct !{!13, !7}
!14 = distinct !{!14, !7}
!15 = distinct !{!15, !7}
!16 = distinct !{!16, !7}
!17 = distinct !{!17, !7}
!18 = distinct !{!18, !7}
!19 = distinct !{!19, !7}
!20 = distinct !{!20, !7}
!21 = distinct !{!21, !7}
!22 = distinct !{!22, !7}
