; ModuleID = 'jdhuff.bc'
source_filename = "jdhuff.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.jpeg_decompress_struct = type { ptr, ptr, ptr, i32, i32, ptr, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, i32, i32, i32, i32, i32, ptr, [4 x ptr], [4 x ptr], [4 x ptr], i32, ptr, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, ptr, i32, [4 x ptr], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.jpeg_memory_mgr = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64 }
%struct.d_derived_tbl = type { [17 x i64], [18 x i64], [17 x i32], ptr, [256 x i32], [256 x i8] }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.bitread_working_state = type { ptr, i64, i32, i64, i32, ptr, ptr }
%struct.jpeg_source_mgr = type { ptr, i64, ptr, ptr, ptr, ptr, ptr }
%struct.jpeg_error_mgr = type { ptr, ptr, ptr, ptr, ptr, i32, %union.anon, i32, i64, ptr, i32, ptr, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.huff_entropy_decoder = type { %struct.jpeg_entropy_decoder, %struct.bitread_perm_state, %struct.savable_state, i32, [4 x ptr], [4 x ptr] }
%struct.jpeg_entropy_decoder = type { ptr, ptr }
%struct.bitread_perm_state = type { i64, i32, i32 }
%struct.savable_state = type { [4 x i32] }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr }
%struct.jpeg_marker_reader = type { ptr, ptr, ptr, ptr, [16 x ptr], i32, i32, i32, i32 }

@extend_test = internal constant [16 x i32] [i32 0, i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384], align 16
@extend_offset = internal constant [16 x i32] [i32 0, i32 -1, i32 -3, i32 -7, i32 -15, i32 -31, i32 -63, i32 -127, i32 -255, i32 -511, i32 -1023, i32 -2047, i32 -4095, i32 -8191, i32 -16383, i32 -32767], align 16
@jpeg_natural_order = external constant [0 x i32], align 4

; Function Attrs: noinline nounwind uwtable
define dso_local void @jpeg_make_d_derived_tbl(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [257 x i8], align 16
  %15 = alloca [257 x i32], align 16
  %16 = alloca i32, align 4
  store ptr %0, ptr %4, align 8
  store ptr %1, ptr %5, align 8
  store ptr %2, ptr %6, align 8
  %17 = load ptr, ptr %6, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %29

20:                                               ; preds = %3
  %21 = load ptr, ptr %4, align 8
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %21, i32 0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %4, align 8
  %27 = call ptr %25(ptr noundef %26, i32 noundef 1, i64 noundef 1640)
  %28 = load ptr, ptr %6, align 8
  store ptr %27, ptr %28, align 8
  br label %29

29:                                               ; preds = %20, %3
  %30 = load ptr, ptr %6, align 8
  %31 = load ptr, ptr %30, align 8
  store ptr %31, ptr %7, align 8
  %32 = load ptr, ptr %5, align 8
  %33 = load ptr, ptr %7, align 8
  %34 = getelementptr inbounds %struct.d_derived_tbl, ptr %33, i32 0, i32 3
  store ptr %32, ptr %34, align 8
  store i32 0, ptr %8, align 4
  store i32 1, ptr %10, align 4
  br label %35

35:                                               ; preds = %60, %29
  %36 = load i32, ptr %10, align 4
  %37 = icmp sle i32 %36, 16
  br i1 %37, label %38, label %63

38:                                               ; preds = %35
  store i32 1, ptr %9, align 4
  br label %39

39:                                               ; preds = %56, %38
  %40 = load i32, ptr %9, align 4
  %41 = load ptr, ptr %5, align 8
  %42 = getelementptr inbounds %struct.JHUFF_TBL, ptr %41, i32 0, i32 0
  %43 = load i32, ptr %10, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [17 x i8], ptr %42, i64 0, i64 %44
  %46 = load i8, ptr %45, align 1
  %47 = zext i8 %46 to i32
  %48 = icmp sle i32 %40, %47
  br i1 %48, label %49, label %59

49:                                               ; preds = %39
  %50 = load i32, ptr %10, align 4
  %51 = trunc i32 %50 to i8
  %52 = load i32, ptr %8, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, ptr %8, align 4
  %54 = sext i32 %52 to i64
  %55 = getelementptr inbounds [257 x i8], ptr %14, i64 0, i64 %54
  store i8 %51, ptr %55, align 1
  br label %56

56:                                               ; preds = %49
  %57 = load i32, ptr %9, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, ptr %9, align 4
  br label %39, !llvm.loop !6

59:                                               ; preds = %39
  br label %60

60:                                               ; preds = %59
  %61 = load i32, ptr %10, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, ptr %10, align 4
  br label %35, !llvm.loop !8

63:                                               ; preds = %35
  %64 = load i32, ptr %8, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [257 x i8], ptr %14, i64 0, i64 %65
  store i8 0, ptr %66, align 1
  store i32 0, ptr %16, align 4
  %67 = getelementptr inbounds [257 x i8], ptr %14, i64 0, i64 0
  %68 = load i8, ptr %67, align 16
  %69 = sext i8 %68 to i32
  store i32 %69, ptr %11, align 4
  store i32 0, ptr %8, align 4
  br label %70

70:                                               ; preds = %93, %63
  %71 = load i32, ptr %8, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [257 x i8], ptr %14, i64 0, i64 %72
  %74 = load i8, ptr %73, align 1
  %75 = icmp ne i8 %74, 0
  br i1 %75, label %76, label %98

76:                                               ; preds = %70
  br label %77

77:                                               ; preds = %85, %76
  %78 = load i32, ptr %8, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [257 x i8], ptr %14, i64 0, i64 %79
  %81 = load i8, ptr %80, align 1
  %82 = sext i8 %81 to i32
  %83 = load i32, ptr %11, align 4
  %84 = icmp eq i32 %82, %83
  br i1 %84, label %85, label %93

85:                                               ; preds = %77
  %86 = load i32, ptr %16, align 4
  %87 = load i32, ptr %8, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, ptr %8, align 4
  %89 = sext i32 %87 to i64
  %90 = getelementptr inbounds [257 x i32], ptr %15, i64 0, i64 %89
  store i32 %86, ptr %90, align 4
  %91 = load i32, ptr %16, align 4
  %92 = add i32 %91, 1
  store i32 %92, ptr %16, align 4
  br label %77, !llvm.loop !9

93:                                               ; preds = %77
  %94 = load i32, ptr %16, align 4
  %95 = shl i32 %94, 1
  store i32 %95, ptr %16, align 4
  %96 = load i32, ptr %11, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, ptr %11, align 4
  br label %70, !llvm.loop !10

98:                                               ; preds = %70
  store i32 0, ptr %8, align 4
  store i32 1, ptr %10, align 4
  br label %99

99:                                               ; preds = %154, %98
  %100 = load i32, ptr %10, align 4
  %101 = icmp sle i32 %100, 16
  br i1 %101, label %102, label %157

102:                                              ; preds = %99
  %103 = load ptr, ptr %5, align 8
  %104 = getelementptr inbounds %struct.JHUFF_TBL, ptr %103, i32 0, i32 0
  %105 = load i32, ptr %10, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [17 x i8], ptr %104, i64 0, i64 %106
  %108 = load i8, ptr %107, align 1
  %109 = icmp ne i8 %108, 0
  br i1 %109, label %110, label %147

110:                                              ; preds = %102
  %111 = load i32, ptr %8, align 4
  %112 = load ptr, ptr %7, align 8
  %113 = getelementptr inbounds %struct.d_derived_tbl, ptr %112, i32 0, i32 2
  %114 = load i32, ptr %10, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [17 x i32], ptr %113, i64 0, i64 %115
  store i32 %111, ptr %116, align 4
  %117 = load i32, ptr %8, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [257 x i32], ptr %15, i64 0, i64 %118
  %120 = load i32, ptr %119, align 4
  %121 = zext i32 %120 to i64
  %122 = load ptr, ptr %7, align 8
  %123 = getelementptr inbounds %struct.d_derived_tbl, ptr %122, i32 0, i32 0
  %124 = load i32, ptr %10, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [17 x i64], ptr %123, i64 0, i64 %125
  store i64 %121, ptr %126, align 8
  %127 = load ptr, ptr %5, align 8
  %128 = getelementptr inbounds %struct.JHUFF_TBL, ptr %127, i32 0, i32 0
  %129 = load i32, ptr %10, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [17 x i8], ptr %128, i64 0, i64 %130
  %132 = load i8, ptr %131, align 1
  %133 = zext i8 %132 to i32
  %134 = load i32, ptr %8, align 4
  %135 = add nsw i32 %134, %133
  store i32 %135, ptr %8, align 4
  %136 = load i32, ptr %8, align 4
  %137 = sub nsw i32 %136, 1
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [257 x i32], ptr %15, i64 0, i64 %138
  %140 = load i32, ptr %139, align 4
  %141 = zext i32 %140 to i64
  %142 = load ptr, ptr %7, align 8
  %143 = getelementptr inbounds %struct.d_derived_tbl, ptr %142, i32 0, i32 1
  %144 = load i32, ptr %10, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [18 x i64], ptr %143, i64 0, i64 %145
  store i64 %141, ptr %146, align 8
  br label %153

147:                                              ; preds = %102
  %148 = load ptr, ptr %7, align 8
  %149 = getelementptr inbounds %struct.d_derived_tbl, ptr %148, i32 0, i32 1
  %150 = load i32, ptr %10, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds [18 x i64], ptr %149, i64 0, i64 %151
  store i64 -1, ptr %152, align 8
  br label %153

153:                                              ; preds = %147, %110
  br label %154

154:                                              ; preds = %153
  %155 = load i32, ptr %10, align 4
  %156 = add nsw i32 %155, 1
  store i32 %156, ptr %10, align 4
  br label %99, !llvm.loop !11

157:                                              ; preds = %99
  %158 = load ptr, ptr %7, align 8
  %159 = getelementptr inbounds %struct.d_derived_tbl, ptr %158, i32 0, i32 1
  %160 = getelementptr inbounds [18 x i64], ptr %159, i64 0, i64 17
  store i64 1048575, ptr %160, align 8
  %161 = load ptr, ptr %7, align 8
  %162 = getelementptr inbounds %struct.d_derived_tbl, ptr %161, i32 0, i32 4
  %163 = getelementptr inbounds [256 x i32], ptr %162, i64 0, i64 0
  call void @llvm.memset.p0.i64(ptr align 8 %163, i8 0, i64 1024, i1 false)
  store i32 0, ptr %8, align 4
  store i32 1, ptr %10, align 4
  br label %164

164:                                              ; preds = %222, %157
  %165 = load i32, ptr %10, align 4
  %166 = icmp sle i32 %165, 8
  br i1 %166, label %167, label %225

167:                                              ; preds = %164
  store i32 1, ptr %9, align 4
  br label %168

168:                                              ; preds = %216, %167
  %169 = load i32, ptr %9, align 4
  %170 = load ptr, ptr %5, align 8
  %171 = getelementptr inbounds %struct.JHUFF_TBL, ptr %170, i32 0, i32 0
  %172 = load i32, ptr %10, align 4
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds [17 x i8], ptr %171, i64 0, i64 %173
  %175 = load i8, ptr %174, align 1
  %176 = zext i8 %175 to i32
  %177 = icmp sle i32 %169, %176
  br i1 %177, label %178, label %221

178:                                              ; preds = %168
  %179 = load i32, ptr %8, align 4
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds [257 x i32], ptr %15, i64 0, i64 %180
  %182 = load i32, ptr %181, align 4
  %183 = load i32, ptr %10, align 4
  %184 = sub nsw i32 8, %183
  %185 = shl i32 %182, %184
  store i32 %185, ptr %12, align 4
  %186 = load i32, ptr %10, align 4
  %187 = sub nsw i32 8, %186
  %188 = shl i32 1, %187
  store i32 %188, ptr %13, align 4
  br label %189

189:                                              ; preds = %212, %178
  %190 = load i32, ptr %13, align 4
  %191 = icmp sgt i32 %190, 0
  br i1 %191, label %192, label %215

192:                                              ; preds = %189
  %193 = load i32, ptr %10, align 4
  %194 = load ptr, ptr %7, align 8
  %195 = getelementptr inbounds %struct.d_derived_tbl, ptr %194, i32 0, i32 4
  %196 = load i32, ptr %12, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds [256 x i32], ptr %195, i64 0, i64 %197
  store i32 %193, ptr %198, align 4
  %199 = load ptr, ptr %5, align 8
  %200 = getelementptr inbounds %struct.JHUFF_TBL, ptr %199, i32 0, i32 1
  %201 = load i32, ptr %8, align 4
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds [256 x i8], ptr %200, i64 0, i64 %202
  %204 = load i8, ptr %203, align 1
  %205 = load ptr, ptr %7, align 8
  %206 = getelementptr inbounds %struct.d_derived_tbl, ptr %205, i32 0, i32 5
  %207 = load i32, ptr %12, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [256 x i8], ptr %206, i64 0, i64 %208
  store i8 %204, ptr %209, align 1
  %210 = load i32, ptr %12, align 4
  %211 = add nsw i32 %210, 1
  store i32 %211, ptr %12, align 4
  br label %212

212:                                              ; preds = %192
  %213 = load i32, ptr %13, align 4
  %214 = add nsw i32 %213, -1
  store i32 %214, ptr %13, align 4
  br label %189, !llvm.loop !12

215:                                              ; preds = %189
  br label %216

216:                                              ; preds = %215
  %217 = load i32, ptr %9, align 4
  %218 = add nsw i32 %217, 1
  store i32 %218, ptr %9, align 4
  %219 = load i32, ptr %8, align 4
  %220 = add nsw i32 %219, 1
  store i32 %220, ptr %8, align 4
  br label %168, !llvm.loop !13

221:                                              ; preds = %168
  br label %222

222:                                              ; preds = %221
  %223 = load i32, ptr %10, align 4
  %224 = add nsw i32 %223, 1
  store i32 %224, ptr %10, align 4
  br label %164, !llvm.loop !14

225:                                              ; preds = %164
  ret void
}

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @jpeg_fill_bit_buffer(ptr noundef %0, i64 noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca ptr, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  store ptr %0, ptr %6, align 8
  store i64 %1, ptr %7, align 8
  store i32 %2, ptr %8, align 4
  store i32 %3, ptr %9, align 4
  %13 = load ptr, ptr %6, align 8
  %14 = getelementptr inbounds %struct.bitread_working_state, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  store ptr %15, ptr %10, align 8
  %16 = load ptr, ptr %6, align 8
  %17 = getelementptr inbounds %struct.bitread_working_state, ptr %16, i32 0, i32 1
  %18 = load i64, ptr %17, align 8
  store i64 %18, ptr %11, align 8
  br label %19

19:                                               ; preds = %153, %4
  %20 = load i32, ptr %8, align 4
  %21 = icmp slt i32 %20, 25
  br i1 %21, label %22, label %161

22:                                               ; preds = %19
  %23 = load ptr, ptr %6, align 8
  %24 = getelementptr inbounds %struct.bitread_working_state, ptr %23, i32 0, i32 2
  %25 = load i32, ptr %24, align 8
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  br label %120

28:                                               ; preds = %22
  %29 = load i64, ptr %11, align 8
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %60

31:                                               ; preds = %28
  %32 = load ptr, ptr %6, align 8
  %33 = getelementptr inbounds %struct.bitread_working_state, ptr %32, i32 0, i32 5
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %34, i32 0, i32 5
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %36, i32 0, i32 3
  %38 = load ptr, ptr %37, align 8
  %39 = load ptr, ptr %6, align 8
  %40 = getelementptr inbounds %struct.bitread_working_state, ptr %39, i32 0, i32 5
  %41 = load ptr, ptr %40, align 8
  %42 = call i32 %38(ptr noundef %41)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %31
  store i32 0, ptr %5, align 4
  br label %174

45:                                               ; preds = %31
  %46 = load ptr, ptr %6, align 8
  %47 = getelementptr inbounds %struct.bitread_working_state, ptr %46, i32 0, i32 5
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %48, i32 0, i32 5
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  store ptr %52, ptr %10, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = getelementptr inbounds %struct.bitread_working_state, ptr %53, i32 0, i32 5
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %55, i32 0, i32 5
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %57, i32 0, i32 1
  %59 = load i64, ptr %58, align 8
  store i64 %59, ptr %11, align 8
  br label %60

60:                                               ; preds = %45, %28
  %61 = load i64, ptr %11, align 8
  %62 = add i64 %61, -1
  store i64 %62, ptr %11, align 8
  %63 = load ptr, ptr %10, align 8
  %64 = getelementptr inbounds i8, ptr %63, i32 1
  store ptr %64, ptr %10, align 8
  %65 = load i8, ptr %63, align 1
  %66 = zext i8 %65 to i32
  store i32 %66, ptr %12, align 4
  %67 = load i32, ptr %12, align 4
  %68 = icmp eq i32 %67, 255
  br i1 %68, label %69, label %153

69:                                               ; preds = %60
  br label %70

70:                                               ; preds = %109, %69
  %71 = load i64, ptr %11, align 8
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %102

73:                                               ; preds = %70
  %74 = load ptr, ptr %6, align 8
  %75 = getelementptr inbounds %struct.bitread_working_state, ptr %74, i32 0, i32 5
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %76, i32 0, i32 5
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %78, i32 0, i32 3
  %80 = load ptr, ptr %79, align 8
  %81 = load ptr, ptr %6, align 8
  %82 = getelementptr inbounds %struct.bitread_working_state, ptr %81, i32 0, i32 5
  %83 = load ptr, ptr %82, align 8
  %84 = call i32 %80(ptr noundef %83)
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %87, label %86

86:                                               ; preds = %73
  store i32 0, ptr %5, align 4
  br label %174

87:                                               ; preds = %73
  %88 = load ptr, ptr %6, align 8
  %89 = getelementptr inbounds %struct.bitread_working_state, ptr %88, i32 0, i32 5
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %90, i32 0, i32 5
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  store ptr %94, ptr %10, align 8
  %95 = load ptr, ptr %6, align 8
  %96 = getelementptr inbounds %struct.bitread_working_state, ptr %95, i32 0, i32 5
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %97, i32 0, i32 5
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %99, i32 0, i32 1
  %101 = load i64, ptr %100, align 8
  store i64 %101, ptr %11, align 8
  br label %102

102:                                              ; preds = %87, %70
  %103 = load i64, ptr %11, align 8
  %104 = add i64 %103, -1
  store i64 %104, ptr %11, align 8
  %105 = load ptr, ptr %10, align 8
  %106 = getelementptr inbounds i8, ptr %105, i32 1
  store ptr %106, ptr %10, align 8
  %107 = load i8, ptr %105, align 1
  %108 = zext i8 %107 to i32
  store i32 %108, ptr %12, align 4
  br label %109

109:                                              ; preds = %102
  %110 = load i32, ptr %12, align 4
  %111 = icmp eq i32 %110, 255
  br i1 %111, label %70, label %112, !llvm.loop !15

112:                                              ; preds = %109
  %113 = load i32, ptr %12, align 4
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %112
  store i32 255, ptr %12, align 4
  br label %152

116:                                              ; preds = %112
  %117 = load i32, ptr %12, align 4
  %118 = load ptr, ptr %6, align 8
  %119 = getelementptr inbounds %struct.bitread_working_state, ptr %118, i32 0, i32 2
  store i32 %117, ptr %119, align 8
  br label %120

120:                                              ; preds = %116, %27
  %121 = load i32, ptr %8, align 4
  %122 = load i32, ptr %9, align 4
  %123 = icmp sge i32 %121, %122
  br i1 %123, label %124, label %125

124:                                              ; preds = %120
  br label %161

125:                                              ; preds = %120
  %126 = load ptr, ptr %6, align 8
  %127 = getelementptr inbounds %struct.bitread_working_state, ptr %126, i32 0, i32 6
  %128 = load ptr, ptr %127, align 8
  %129 = load i32, ptr %128, align 4
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %151, label %131

131:                                              ; preds = %125
  %132 = load ptr, ptr %6, align 8
  %133 = getelementptr inbounds %struct.bitread_working_state, ptr %132, i32 0, i32 5
  %134 = load ptr, ptr %133, align 8
  %135 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %134, i32 0, i32 0
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %136, i32 0, i32 5
  store i32 113, ptr %137, align 8
  %138 = load ptr, ptr %6, align 8
  %139 = getelementptr inbounds %struct.bitread_working_state, ptr %138, i32 0, i32 5
  %140 = load ptr, ptr %139, align 8
  %141 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %140, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %142, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = load ptr, ptr %6, align 8
  %146 = getelementptr inbounds %struct.bitread_working_state, ptr %145, i32 0, i32 5
  %147 = load ptr, ptr %146, align 8
  call void %144(ptr noundef %147, i32 noundef -1)
  %148 = load ptr, ptr %6, align 8
  %149 = getelementptr inbounds %struct.bitread_working_state, ptr %148, i32 0, i32 6
  %150 = load ptr, ptr %149, align 8
  store i32 1, ptr %150, align 4
  br label %151

151:                                              ; preds = %131, %125
  store i32 0, ptr %12, align 4
  br label %152

152:                                              ; preds = %151, %115
  br label %153

153:                                              ; preds = %152, %60
  %154 = load i64, ptr %7, align 8
  %155 = shl i64 %154, 8
  %156 = load i32, ptr %12, align 4
  %157 = sext i32 %156 to i64
  %158 = or i64 %155, %157
  store i64 %158, ptr %7, align 8
  %159 = load i32, ptr %8, align 4
  %160 = add nsw i32 %159, 8
  store i32 %160, ptr %8, align 4
  br label %19, !llvm.loop !16

161:                                              ; preds = %124, %19
  %162 = load ptr, ptr %10, align 8
  %163 = load ptr, ptr %6, align 8
  %164 = getelementptr inbounds %struct.bitread_working_state, ptr %163, i32 0, i32 0
  store ptr %162, ptr %164, align 8
  %165 = load i64, ptr %11, align 8
  %166 = load ptr, ptr %6, align 8
  %167 = getelementptr inbounds %struct.bitread_working_state, ptr %166, i32 0, i32 1
  store i64 %165, ptr %167, align 8
  %168 = load i64, ptr %7, align 8
  %169 = load ptr, ptr %6, align 8
  %170 = getelementptr inbounds %struct.bitread_working_state, ptr %169, i32 0, i32 3
  store i64 %168, ptr %170, align 8
  %171 = load i32, ptr %8, align 4
  %172 = load ptr, ptr %6, align 8
  %173 = getelementptr inbounds %struct.bitread_working_state, ptr %172, i32 0, i32 4
  store i32 %171, ptr %173, align 8
  store i32 1, ptr %5, align 4
  br label %174

174:                                              ; preds = %161, %86, %44
  %175 = load i32, ptr %5, align 4
  ret i32 %175
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @jpeg_huff_decode(ptr noundef %0, i64 noundef %1, i32 noundef %2, ptr noundef %3, i32 noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  store ptr %0, ptr %7, align 8
  store i64 %1, ptr %8, align 8
  store i32 %2, ptr %9, align 4
  store ptr %3, ptr %10, align 8
  store i32 %4, ptr %11, align 4
  %14 = load i32, ptr %11, align 4
  store i32 %14, ptr %12, align 4
  %15 = load i32, ptr %9, align 4
  %16 = load i32, ptr %12, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %33

18:                                               ; preds = %5
  %19 = load ptr, ptr %7, align 8
  %20 = load i64, ptr %8, align 8
  %21 = load i32, ptr %9, align 4
  %22 = load i32, ptr %12, align 4
  %23 = call i32 @jpeg_fill_bit_buffer(ptr noundef %19, i64 noundef %20, i32 noundef %21, i32 noundef %22)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %18
  store i32 -1, ptr %6, align 4
  br label %138

26:                                               ; preds = %18
  %27 = load ptr, ptr %7, align 8
  %28 = getelementptr inbounds %struct.bitread_working_state, ptr %27, i32 0, i32 3
  %29 = load i64, ptr %28, align 8
  store i64 %29, ptr %8, align 8
  %30 = load ptr, ptr %7, align 8
  %31 = getelementptr inbounds %struct.bitread_working_state, ptr %30, i32 0, i32 4
  %32 = load i32, ptr %31, align 8
  store i32 %32, ptr %9, align 4
  br label %33

33:                                               ; preds = %26, %5
  %34 = load i64, ptr %8, align 8
  %35 = load i32, ptr %12, align 4
  %36 = load i32, ptr %9, align 4
  %37 = sub nsw i32 %36, %35
  store i32 %37, ptr %9, align 4
  %38 = zext i32 %37 to i64
  %39 = ashr i64 %34, %38
  %40 = trunc i64 %39 to i32
  %41 = load i32, ptr %12, align 4
  %42 = shl i32 1, %41
  %43 = sub nsw i32 %42, 1
  %44 = and i32 %40, %43
  %45 = sext i32 %44 to i64
  store i64 %45, ptr %13, align 8
  br label %46

46:                                               ; preds = %74, %33
  %47 = load i64, ptr %13, align 8
  %48 = load ptr, ptr %10, align 8
  %49 = getelementptr inbounds %struct.d_derived_tbl, ptr %48, i32 0, i32 1
  %50 = load i32, ptr %12, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [18 x i64], ptr %49, i64 0, i64 %51
  %53 = load i64, ptr %52, align 8
  %54 = icmp sgt i64 %47, %53
  br i1 %54, label %55, label %87

55:                                               ; preds = %46
  %56 = load i64, ptr %13, align 8
  %57 = shl i64 %56, 1
  store i64 %57, ptr %13, align 8
  %58 = load i32, ptr %9, align 4
  %59 = icmp slt i32 %58, 1
  br i1 %59, label %60, label %74

60:                                               ; preds = %55
  %61 = load ptr, ptr %7, align 8
  %62 = load i64, ptr %8, align 8
  %63 = load i32, ptr %9, align 4
  %64 = call i32 @jpeg_fill_bit_buffer(ptr noundef %61, i64 noundef %62, i32 noundef %63, i32 noundef 1)
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %60
  store i32 -1, ptr %6, align 4
  br label %138

67:                                               ; preds = %60
  %68 = load ptr, ptr %7, align 8
  %69 = getelementptr inbounds %struct.bitread_working_state, ptr %68, i32 0, i32 3
  %70 = load i64, ptr %69, align 8
  store i64 %70, ptr %8, align 8
  %71 = load ptr, ptr %7, align 8
  %72 = getelementptr inbounds %struct.bitread_working_state, ptr %71, i32 0, i32 4
  %73 = load i32, ptr %72, align 8
  store i32 %73, ptr %9, align 4
  br label %74

74:                                               ; preds = %67, %55
  %75 = load i64, ptr %8, align 8
  %76 = load i32, ptr %9, align 4
  %77 = sub nsw i32 %76, 1
  store i32 %77, ptr %9, align 4
  %78 = zext i32 %77 to i64
  %79 = ashr i64 %75, %78
  %80 = trunc i64 %79 to i32
  %81 = and i32 %80, 1
  %82 = sext i32 %81 to i64
  %83 = load i64, ptr %13, align 8
  %84 = or i64 %83, %82
  store i64 %84, ptr %13, align 8
  %85 = load i32, ptr %12, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, ptr %12, align 4
  br label %46, !llvm.loop !17

87:                                               ; preds = %46
  %88 = load i64, ptr %8, align 8
  %89 = load ptr, ptr %7, align 8
  %90 = getelementptr inbounds %struct.bitread_working_state, ptr %89, i32 0, i32 3
  store i64 %88, ptr %90, align 8
  %91 = load i32, ptr %9, align 4
  %92 = load ptr, ptr %7, align 8
  %93 = getelementptr inbounds %struct.bitread_working_state, ptr %92, i32 0, i32 4
  store i32 %91, ptr %93, align 8
  %94 = load i32, ptr %12, align 4
  %95 = icmp sgt i32 %94, 16
  br i1 %95, label %96, label %113

96:                                               ; preds = %87
  %97 = load ptr, ptr %7, align 8
  %98 = getelementptr inbounds %struct.bitread_working_state, ptr %97, i32 0, i32 5
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %101, i32 0, i32 5
  store i32 114, ptr %102, align 8
  %103 = load ptr, ptr %7, align 8
  %104 = getelementptr inbounds %struct.bitread_working_state, ptr %103, i32 0, i32 5
  %105 = load ptr, ptr %104, align 8
  %106 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %105, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load ptr, ptr %7, align 8
  %111 = getelementptr inbounds %struct.bitread_working_state, ptr %110, i32 0, i32 5
  %112 = load ptr, ptr %111, align 8
  call void %109(ptr noundef %112, i32 noundef -1)
  store i32 0, ptr %6, align 4
  br label %138

113:                                              ; preds = %87
  %114 = load ptr, ptr %10, align 8
  %115 = getelementptr inbounds %struct.d_derived_tbl, ptr %114, i32 0, i32 3
  %116 = load ptr, ptr %115, align 8
  %117 = getelementptr inbounds %struct.JHUFF_TBL, ptr %116, i32 0, i32 1
  %118 = load ptr, ptr %10, align 8
  %119 = getelementptr inbounds %struct.d_derived_tbl, ptr %118, i32 0, i32 2
  %120 = load i32, ptr %12, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [17 x i32], ptr %119, i64 0, i64 %121
  %123 = load i32, ptr %122, align 4
  %124 = load i64, ptr %13, align 8
  %125 = load ptr, ptr %10, align 8
  %126 = getelementptr inbounds %struct.d_derived_tbl, ptr %125, i32 0, i32 0
  %127 = load i32, ptr %12, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds [17 x i64], ptr %126, i64 0, i64 %128
  %130 = load i64, ptr %129, align 8
  %131 = sub nsw i64 %124, %130
  %132 = trunc i64 %131 to i32
  %133 = add nsw i32 %123, %132
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds [256 x i8], ptr %117, i64 0, i64 %134
  %136 = load i8, ptr %135, align 1
  %137 = zext i8 %136 to i32
  store i32 %137, ptr %6, align 4
  br label %138

138:                                              ; preds = %113, %96, %66, %25
  %139 = load i32, ptr %6, align 4
  ret i32 %139
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @jinit_huff_decoder(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca i32, align 4
  store ptr %0, ptr %2, align 8
  %5 = load ptr, ptr %2, align 8
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %5, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %2, align 8
  %11 = call ptr %9(ptr noundef %10, i32 noundef 1, i64 noundef 120)
  store ptr %11, ptr %3, align 8
  %12 = load ptr, ptr %3, align 8
  %13 = load ptr, ptr %2, align 8
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %13, i32 0, i32 79
  store ptr %12, ptr %14, align 8
  %15 = load ptr, ptr %3, align 8
  %16 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.jpeg_entropy_decoder, ptr %16, i32 0, i32 0
  store ptr @start_pass_huff_decoder, ptr %17, align 8
  %18 = load ptr, ptr %3, align 8
  %19 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %18, i32 0, i32 0
  %20 = getelementptr inbounds %struct.jpeg_entropy_decoder, ptr %19, i32 0, i32 1
  store ptr @decode_mcu, ptr %20, align 8
  store i32 0, ptr %4, align 4
  br label %21

21:                                               ; preds = %35, %1
  %22 = load i32, ptr %4, align 4
  %23 = icmp slt i32 %22, 4
  br i1 %23, label %24, label %38

24:                                               ; preds = %21
  %25 = load ptr, ptr %3, align 8
  %26 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %25, i32 0, i32 5
  %27 = load i32, ptr %4, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [4 x ptr], ptr %26, i64 0, i64 %28
  store ptr null, ptr %29, align 8
  %30 = load ptr, ptr %3, align 8
  %31 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %30, i32 0, i32 4
  %32 = load i32, ptr %4, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [4 x ptr], ptr %31, i64 0, i64 %33
  store ptr null, ptr %34, align 8
  br label %35

35:                                               ; preds = %24
  %36 = load i32, ptr %4, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, ptr %4, align 4
  br label %21, !llvm.loop !18

38:                                               ; preds = %21
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @start_pass_huff_decoder(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  %8 = load ptr, ptr %2, align 8
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %8, i32 0, i32 79
  %10 = load ptr, ptr %9, align 8
  store ptr %10, ptr %3, align 8
  %11 = load ptr, ptr %2, align 8
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %11, i32 0, i32 68
  %13 = load i32, ptr %12, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %30, label %15

15:                                               ; preds = %1
  %16 = load ptr, ptr %2, align 8
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %16, i32 0, i32 69
  %18 = load i32, ptr %17, align 8
  %19 = icmp ne i32 %18, 63
  br i1 %19, label %30, label %20

20:                                               ; preds = %15
  %21 = load ptr, ptr %2, align 8
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %21, i32 0, i32 70
  %23 = load i32, ptr %22, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %20
  %26 = load ptr, ptr %2, align 8
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %26, i32 0, i32 71
  %28 = load i32, ptr %27, align 8
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %41

30:                                               ; preds = %25, %20, %15, %1
  %31 = load ptr, ptr %2, align 8
  %32 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %33, i32 0, i32 5
  store i32 118, ptr %34, align 8
  %35 = load ptr, ptr %2, align 8
  %36 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %37, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %2, align 8
  call void %39(ptr noundef %40, i32 noundef -1)
  br label %41

41:                                               ; preds = %30, %25
  store i32 0, ptr %4, align 4
  br label %42

42:                                               ; preds = %153, %41
  %43 = load i32, ptr %4, align 4
  %44 = load ptr, ptr %2, align 8
  %45 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %44, i32 0, i32 62
  %46 = load i32, ptr %45, align 8
  %47 = icmp slt i32 %43, %46
  br i1 %47, label %48, label %156

48:                                               ; preds = %42
  %49 = load ptr, ptr %2, align 8
  %50 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %49, i32 0, i32 63
  %51 = load i32, ptr %4, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [4 x ptr], ptr %50, i64 0, i64 %52
  %54 = load ptr, ptr %53, align 8
  store ptr %54, ptr %7, align 8
  %55 = load ptr, ptr %7, align 8
  %56 = getelementptr inbounds %struct.jpeg_component_info, ptr %55, i32 0, i32 5
  %57 = load i32, ptr %56, align 4
  store i32 %57, ptr %5, align 4
  %58 = load ptr, ptr %7, align 8
  %59 = getelementptr inbounds %struct.jpeg_component_info, ptr %58, i32 0, i32 6
  %60 = load i32, ptr %59, align 8
  store i32 %60, ptr %6, align 4
  %61 = load i32, ptr %5, align 4
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %74, label %63

63:                                               ; preds = %48
  %64 = load i32, ptr %5, align 4
  %65 = icmp sge i32 %64, 4
  br i1 %65, label %74, label %66

66:                                               ; preds = %63
  %67 = load ptr, ptr %2, align 8
  %68 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %67, i32 0, i32 40
  %69 = load i32, ptr %5, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [4 x ptr], ptr %68, i64 0, i64 %70
  %72 = load ptr, ptr %71, align 8
  %73 = icmp eq ptr %72, null
  br i1 %73, label %74, label %91

74:                                               ; preds = %66, %63, %48
  %75 = load ptr, ptr %2, align 8
  %76 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %75, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %77, i32 0, i32 5
  store i32 49, ptr %78, align 8
  %79 = load i32, ptr %5, align 4
  %80 = load ptr, ptr %2, align 8
  %81 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %80, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %82, i32 0, i32 6
  %84 = getelementptr inbounds [8 x i32], ptr %83, i64 0, i64 0
  store i32 %79, ptr %84, align 4
  %85 = load ptr, ptr %2, align 8
  %86 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %85, i32 0, i32 0
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %2, align 8
  call void %89(ptr noundef %90)
  br label %91

91:                                               ; preds = %74, %66
  %92 = load i32, ptr %6, align 4
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %105, label %94

94:                                               ; preds = %91
  %95 = load i32, ptr %6, align 4
  %96 = icmp sge i32 %95, 4
  br i1 %96, label %105, label %97

97:                                               ; preds = %94
  %98 = load ptr, ptr %2, align 8
  %99 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %98, i32 0, i32 41
  %100 = load i32, ptr %6, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [4 x ptr], ptr %99, i64 0, i64 %101
  %103 = load ptr, ptr %102, align 8
  %104 = icmp eq ptr %103, null
  br i1 %104, label %105, label %122

105:                                              ; preds = %97, %94, %91
  %106 = load ptr, ptr %2, align 8
  %107 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %106, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %108, i32 0, i32 5
  store i32 49, ptr %109, align 8
  %110 = load i32, ptr %6, align 4
  %111 = load ptr, ptr %2, align 8
  %112 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %113, i32 0, i32 6
  %115 = getelementptr inbounds [8 x i32], ptr %114, i64 0, i64 0
  store i32 %110, ptr %115, align 4
  %116 = load ptr, ptr %2, align 8
  %117 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %116, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = load ptr, ptr %2, align 8
  call void %120(ptr noundef %121)
  br label %122

122:                                              ; preds = %105, %97
  %123 = load ptr, ptr %2, align 8
  %124 = load ptr, ptr %2, align 8
  %125 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %124, i32 0, i32 40
  %126 = load i32, ptr %5, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [4 x ptr], ptr %125, i64 0, i64 %127
  %129 = load ptr, ptr %128, align 8
  %130 = load ptr, ptr %3, align 8
  %131 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %130, i32 0, i32 4
  %132 = load i32, ptr %5, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [4 x ptr], ptr %131, i64 0, i64 %133
  call void @jpeg_make_d_derived_tbl(ptr noundef %123, ptr noundef %129, ptr noundef %134)
  %135 = load ptr, ptr %2, align 8
  %136 = load ptr, ptr %2, align 8
  %137 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %136, i32 0, i32 41
  %138 = load i32, ptr %6, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [4 x ptr], ptr %137, i64 0, i64 %139
  %141 = load ptr, ptr %140, align 8
  %142 = load ptr, ptr %3, align 8
  %143 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %142, i32 0, i32 5
  %144 = load i32, ptr %6, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [4 x ptr], ptr %143, i64 0, i64 %145
  call void @jpeg_make_d_derived_tbl(ptr noundef %135, ptr noundef %141, ptr noundef %146)
  %147 = load ptr, ptr %3, align 8
  %148 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %147, i32 0, i32 2
  %149 = getelementptr inbounds %struct.savable_state, ptr %148, i32 0, i32 0
  %150 = load i32, ptr %4, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds [4 x i32], ptr %149, i64 0, i64 %151
  store i32 0, ptr %152, align 4
  br label %153

153:                                              ; preds = %122
  %154 = load i32, ptr %4, align 4
  %155 = add nsw i32 %154, 1
  store i32 %155, ptr %4, align 4
  br label %42, !llvm.loop !19

156:                                              ; preds = %42
  %157 = load ptr, ptr %3, align 8
  %158 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %157, i32 0, i32 1
  %159 = getelementptr inbounds %struct.bitread_perm_state, ptr %158, i32 0, i32 1
  store i32 0, ptr %159, align 8
  %160 = load ptr, ptr %3, align 8
  %161 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %160, i32 0, i32 1
  %162 = getelementptr inbounds %struct.bitread_perm_state, ptr %161, i32 0, i32 0
  store i64 0, ptr %162, align 8
  %163 = load ptr, ptr %3, align 8
  %164 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %163, i32 0, i32 1
  %165 = getelementptr inbounds %struct.bitread_perm_state, ptr %164, i32 0, i32 2
  store i32 0, ptr %165, align 4
  %166 = load ptr, ptr %2, align 8
  %167 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %166, i32 0, i32 49
  %168 = load i32, ptr %167, align 8
  %169 = load ptr, ptr %3, align 8
  %170 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %169, i32 0, i32 3
  store i32 %168, ptr %170, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @decode_mcu(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca ptr, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.bitread_working_state, align 8
  %16 = alloca %struct.savable_state, align 4
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  store ptr %0, ptr %4, align 8
  store ptr %1, ptr %5, align 8
  %26 = load ptr, ptr %4, align 8
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %26, i32 0, i32 79
  %28 = load ptr, ptr %27, align 8
  store ptr %28, ptr %6, align 8
  %29 = load ptr, ptr %4, align 8
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %29, i32 0, i32 49
  %31 = load i32, ptr %30, align 8
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %2
  %34 = load ptr, ptr %6, align 8
  %35 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %34, i32 0, i32 3
  %36 = load i32, ptr %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %44

38:                                               ; preds = %33
  %39 = load ptr, ptr %4, align 8
  %40 = call i32 @process_restart(ptr noundef %39)
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %38
  store i32 0, ptr %3, align 4
  br label %528

43:                                               ; preds = %38
  br label %44

44:                                               ; preds = %43, %33
  br label %45

45:                                               ; preds = %44, %2
  %46 = load ptr, ptr %4, align 8
  %47 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 5
  store ptr %46, ptr %47, align 8
  %48 = load ptr, ptr %4, align 8
  %49 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %48, i32 0, i32 5
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 0
  store ptr %52, ptr %53, align 8
  %54 = load ptr, ptr %4, align 8
  %55 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %54, i32 0, i32 5
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %56, i32 0, i32 1
  %58 = load i64, ptr %57, align 8
  %59 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 1
  store i64 %58, ptr %59, align 8
  %60 = load ptr, ptr %4, align 8
  %61 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %60, i32 0, i32 72
  %62 = load i32, ptr %61, align 4
  %63 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 2
  store i32 %62, ptr %63, align 8
  %64 = load ptr, ptr %6, align 8
  %65 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %64, i32 0, i32 1
  %66 = getelementptr inbounds %struct.bitread_perm_state, ptr %65, i32 0, i32 0
  %67 = load i64, ptr %66, align 8
  store i64 %67, ptr %13, align 8
  %68 = load ptr, ptr %6, align 8
  %69 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %68, i32 0, i32 1
  %70 = getelementptr inbounds %struct.bitread_perm_state, ptr %69, i32 0, i32 1
  %71 = load i32, ptr %70, align 8
  store i32 %71, ptr %14, align 4
  %72 = load ptr, ptr %6, align 8
  %73 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %72, i32 0, i32 1
  %74 = getelementptr inbounds %struct.bitread_perm_state, ptr %73, i32 0, i32 2
  %75 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 6
  store ptr %74, ptr %75, align 8
  %76 = load ptr, ptr %6, align 8
  %77 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %76, i32 0, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %16, ptr align 8 %77, i64 16, i1 false)
  store i32 0, ptr %10, align 4
  br label %78

78:                                               ; preds = %494, %45
  %79 = load i32, ptr %10, align 4
  %80 = load ptr, ptr %4, align 8
  %81 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %80, i32 0, i32 66
  %82 = load i32, ptr %81, align 8
  %83 = icmp slt i32 %79, %82
  br i1 %83, label %84, label %497

84:                                               ; preds = %78
  %85 = load ptr, ptr %5, align 8
  %86 = load i32, ptr %10, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds ptr, ptr %85, i64 %87
  %89 = load ptr, ptr %88, align 8
  store ptr %89, ptr %12, align 8
  %90 = load ptr, ptr %4, align 8
  %91 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %90, i32 0, i32 67
  %92 = load i32, ptr %10, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [10 x i32], ptr %91, i64 0, i64 %93
  %95 = load i32, ptr %94, align 4
  store i32 %95, ptr %11, align 4
  %96 = load ptr, ptr %4, align 8
  %97 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %96, i32 0, i32 63
  %98 = load i32, ptr %11, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [4 x ptr], ptr %97, i64 0, i64 %99
  %101 = load ptr, ptr %100, align 8
  store ptr %101, ptr %19, align 8
  %102 = load ptr, ptr %6, align 8
  %103 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %102, i32 0, i32 4
  %104 = load ptr, ptr %19, align 8
  %105 = getelementptr inbounds %struct.jpeg_component_info, ptr %104, i32 0, i32 5
  %106 = load i32, ptr %105, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [4 x ptr], ptr %103, i64 0, i64 %107
  %109 = load ptr, ptr %108, align 8
  store ptr %109, ptr %17, align 8
  %110 = load ptr, ptr %6, align 8
  %111 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %110, i32 0, i32 5
  %112 = load ptr, ptr %19, align 8
  %113 = getelementptr inbounds %struct.jpeg_component_info, ptr %112, i32 0, i32 6
  %114 = load i32, ptr %113, align 8
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [4 x ptr], ptr %111, i64 0, i64 %115
  %117 = load ptr, ptr %116, align 8
  store ptr %117, ptr %18, align 8
  %118 = load i32, ptr %14, align 4
  %119 = icmp slt i32 %118, 8
  br i1 %119, label %120, label %135

120:                                              ; preds = %84
  %121 = load i64, ptr %13, align 8
  %122 = load i32, ptr %14, align 4
  %123 = call i32 @jpeg_fill_bit_buffer(ptr noundef %15, i64 noundef %121, i32 noundef %122, i32 noundef 0)
  %124 = icmp ne i32 %123, 0
  br i1 %124, label %126, label %125

125:                                              ; preds = %120
  store i32 0, ptr %3, align 4
  br label %528

126:                                              ; preds = %120
  %127 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 3
  %128 = load i64, ptr %127, align 8
  store i64 %128, ptr %13, align 8
  %129 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 4
  %130 = load i32, ptr %129, align 8
  store i32 %130, ptr %14, align 4
  %131 = load i32, ptr %14, align 4
  %132 = icmp slt i32 %131, 8
  br i1 %132, label %133, label %134

133:                                              ; preds = %126
  store i32 1, ptr %20, align 4
  br label %162

134:                                              ; preds = %126
  br label %135

135:                                              ; preds = %134, %84
  %136 = load i64, ptr %13, align 8
  %137 = load i32, ptr %14, align 4
  %138 = sub nsw i32 %137, 8
  %139 = zext i32 %138 to i64
  %140 = ashr i64 %136, %139
  %141 = trunc i64 %140 to i32
  %142 = and i32 %141, 255
  store i32 %142, ptr %21, align 4
  %143 = load ptr, ptr %17, align 8
  %144 = getelementptr inbounds %struct.d_derived_tbl, ptr %143, i32 0, i32 4
  %145 = load i32, ptr %21, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds [256 x i32], ptr %144, i64 0, i64 %146
  %148 = load i32, ptr %147, align 4
  store i32 %148, ptr %20, align 4
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %150, label %161

150:                                              ; preds = %135
  %151 = load i32, ptr %20, align 4
  %152 = load i32, ptr %14, align 4
  %153 = sub nsw i32 %152, %151
  store i32 %153, ptr %14, align 4
  %154 = load ptr, ptr %17, align 8
  %155 = getelementptr inbounds %struct.d_derived_tbl, ptr %154, i32 0, i32 5
  %156 = load i32, ptr %21, align 4
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds [256 x i8], ptr %155, i64 0, i64 %157
  %159 = load i8, ptr %158, align 1
  %160 = zext i8 %159 to i32
  store i32 %160, ptr %7, align 4
  br label %175

161:                                              ; preds = %135
  store i32 9, ptr %20, align 4
  br label %162

162:                                              ; preds = %161, %133
  %163 = load i64, ptr %13, align 8
  %164 = load i32, ptr %14, align 4
  %165 = load ptr, ptr %17, align 8
  %166 = load i32, ptr %20, align 4
  %167 = call i32 @jpeg_huff_decode(ptr noundef %15, i64 noundef %163, i32 noundef %164, ptr noundef %165, i32 noundef %166)
  store i32 %167, ptr %7, align 4
  %168 = icmp slt i32 %167, 0
  br i1 %168, label %169, label %170

169:                                              ; preds = %162
  store i32 0, ptr %3, align 4
  br label %528

170:                                              ; preds = %162
  %171 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 3
  %172 = load i64, ptr %171, align 8
  store i64 %172, ptr %13, align 8
  %173 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 4
  %174 = load i32, ptr %173, align 8
  store i32 %174, ptr %14, align 4
  br label %175

175:                                              ; preds = %170, %150
  %176 = load i32, ptr %7, align 4
  %177 = icmp ne i32 %176, 0
  br i1 %177, label %178, label %223

178:                                              ; preds = %175
  %179 = load i32, ptr %14, align 4
  %180 = load i32, ptr %7, align 4
  %181 = icmp slt i32 %179, %180
  br i1 %181, label %182, label %194

182:                                              ; preds = %178
  %183 = load i64, ptr %13, align 8
  %184 = load i32, ptr %14, align 4
  %185 = load i32, ptr %7, align 4
  %186 = call i32 @jpeg_fill_bit_buffer(ptr noundef %15, i64 noundef %183, i32 noundef %184, i32 noundef %185)
  %187 = icmp ne i32 %186, 0
  br i1 %187, label %189, label %188

188:                                              ; preds = %182
  store i32 0, ptr %3, align 4
  br label %528

189:                                              ; preds = %182
  %190 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 3
  %191 = load i64, ptr %190, align 8
  store i64 %191, ptr %13, align 8
  %192 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 4
  %193 = load i32, ptr %192, align 8
  store i32 %193, ptr %14, align 4
  br label %194

194:                                              ; preds = %189, %178
  %195 = load i64, ptr %13, align 8
  %196 = load i32, ptr %7, align 4
  %197 = load i32, ptr %14, align 4
  %198 = sub nsw i32 %197, %196
  store i32 %198, ptr %14, align 4
  %199 = zext i32 %198 to i64
  %200 = ashr i64 %195, %199
  %201 = trunc i64 %200 to i32
  %202 = load i32, ptr %7, align 4
  %203 = shl i32 1, %202
  %204 = sub nsw i32 %203, 1
  %205 = and i32 %201, %204
  store i32 %205, ptr %9, align 4
  %206 = load i32, ptr %9, align 4
  %207 = load i32, ptr %7, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [16 x i32], ptr @extend_test, i64 0, i64 %208
  %210 = load i32, ptr %209, align 4
  %211 = icmp slt i32 %206, %210
  br i1 %211, label %212, label %219

212:                                              ; preds = %194
  %213 = load i32, ptr %9, align 4
  %214 = load i32, ptr %7, align 4
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds [16 x i32], ptr @extend_offset, i64 0, i64 %215
  %217 = load i32, ptr %216, align 4
  %218 = add nsw i32 %213, %217
  br label %221

219:                                              ; preds = %194
  %220 = load i32, ptr %9, align 4
  br label %221

221:                                              ; preds = %219, %212
  %222 = phi i32 [ %218, %212 ], [ %220, %219 ]
  store i32 %222, ptr %7, align 4
  br label %223

223:                                              ; preds = %221, %175
  %224 = load ptr, ptr %19, align 8
  %225 = getelementptr inbounds %struct.jpeg_component_info, ptr %224, i32 0, i32 12
  %226 = load i32, ptr %225, align 8
  %227 = icmp ne i32 %226, 0
  br i1 %227, label %229, label %228

228:                                              ; preds = %223
  br label %389

229:                                              ; preds = %223
  %230 = getelementptr inbounds %struct.savable_state, ptr %16, i32 0, i32 0
  %231 = load i32, ptr %11, align 4
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds [4 x i32], ptr %230, i64 0, i64 %232
  %234 = load i32, ptr %233, align 4
  %235 = load i32, ptr %7, align 4
  %236 = add nsw i32 %235, %234
  store i32 %236, ptr %7, align 4
  %237 = load i32, ptr %7, align 4
  %238 = getelementptr inbounds %struct.savable_state, ptr %16, i32 0, i32 0
  %239 = load i32, ptr %11, align 4
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds [4 x i32], ptr %238, i64 0, i64 %240
  store i32 %237, ptr %241, align 4
  %242 = load i32, ptr %7, align 4
  %243 = trunc i32 %242 to i16
  %244 = load ptr, ptr %12, align 8
  %245 = getelementptr inbounds [64 x i16], ptr %244, i64 0, i64 0
  store i16 %243, ptr %245, align 2
  %246 = load ptr, ptr %19, align 8
  %247 = getelementptr inbounds %struct.jpeg_component_info, ptr %246, i32 0, i32 9
  %248 = load i32, ptr %247, align 4
  %249 = icmp sgt i32 %248, 1
  br i1 %249, label %250, label %388

250:                                              ; preds = %229
  store i32 1, ptr %8, align 4
  br label %251

251:                                              ; preds = %384, %250
  %252 = load i32, ptr %8, align 4
  %253 = icmp slt i32 %252, 64
  br i1 %253, label %254, label %387

254:                                              ; preds = %251
  %255 = load i32, ptr %14, align 4
  %256 = icmp slt i32 %255, 8
  br i1 %256, label %257, label %272

257:                                              ; preds = %254
  %258 = load i64, ptr %13, align 8
  %259 = load i32, ptr %14, align 4
  %260 = call i32 @jpeg_fill_bit_buffer(ptr noundef %15, i64 noundef %258, i32 noundef %259, i32 noundef 0)
  %261 = icmp ne i32 %260, 0
  br i1 %261, label %263, label %262

262:                                              ; preds = %257
  store i32 0, ptr %3, align 4
  br label %528

263:                                              ; preds = %257
  %264 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 3
  %265 = load i64, ptr %264, align 8
  store i64 %265, ptr %13, align 8
  %266 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 4
  %267 = load i32, ptr %266, align 8
  store i32 %267, ptr %14, align 4
  %268 = load i32, ptr %14, align 4
  %269 = icmp slt i32 %268, 8
  br i1 %269, label %270, label %271

270:                                              ; preds = %263
  store i32 1, ptr %22, align 4
  br label %299

271:                                              ; preds = %263
  br label %272

272:                                              ; preds = %271, %254
  %273 = load i64, ptr %13, align 8
  %274 = load i32, ptr %14, align 4
  %275 = sub nsw i32 %274, 8
  %276 = zext i32 %275 to i64
  %277 = ashr i64 %273, %276
  %278 = trunc i64 %277 to i32
  %279 = and i32 %278, 255
  store i32 %279, ptr %23, align 4
  %280 = load ptr, ptr %18, align 8
  %281 = getelementptr inbounds %struct.d_derived_tbl, ptr %280, i32 0, i32 4
  %282 = load i32, ptr %23, align 4
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds [256 x i32], ptr %281, i64 0, i64 %283
  %285 = load i32, ptr %284, align 4
  store i32 %285, ptr %22, align 4
  %286 = icmp ne i32 %285, 0
  br i1 %286, label %287, label %298

287:                                              ; preds = %272
  %288 = load i32, ptr %22, align 4
  %289 = load i32, ptr %14, align 4
  %290 = sub nsw i32 %289, %288
  store i32 %290, ptr %14, align 4
  %291 = load ptr, ptr %18, align 8
  %292 = getelementptr inbounds %struct.d_derived_tbl, ptr %291, i32 0, i32 5
  %293 = load i32, ptr %23, align 4
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds [256 x i8], ptr %292, i64 0, i64 %294
  %296 = load i8, ptr %295, align 1
  %297 = zext i8 %296 to i32
  store i32 %297, ptr %7, align 4
  br label %312

298:                                              ; preds = %272
  store i32 9, ptr %22, align 4
  br label %299

299:                                              ; preds = %298, %270
  %300 = load i64, ptr %13, align 8
  %301 = load i32, ptr %14, align 4
  %302 = load ptr, ptr %18, align 8
  %303 = load i32, ptr %22, align 4
  %304 = call i32 @jpeg_huff_decode(ptr noundef %15, i64 noundef %300, i32 noundef %301, ptr noundef %302, i32 noundef %303)
  store i32 %304, ptr %7, align 4
  %305 = icmp slt i32 %304, 0
  br i1 %305, label %306, label %307

306:                                              ; preds = %299
  store i32 0, ptr %3, align 4
  br label %528

307:                                              ; preds = %299
  %308 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 3
  %309 = load i64, ptr %308, align 8
  store i64 %309, ptr %13, align 8
  %310 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 4
  %311 = load i32, ptr %310, align 8
  store i32 %311, ptr %14, align 4
  br label %312

312:                                              ; preds = %307, %287
  %313 = load i32, ptr %7, align 4
  %314 = ashr i32 %313, 4
  store i32 %314, ptr %9, align 4
  %315 = load i32, ptr %7, align 4
  %316 = and i32 %315, 15
  store i32 %316, ptr %7, align 4
  %317 = load i32, ptr %7, align 4
  %318 = icmp ne i32 %317, 0
  br i1 %318, label %319, label %376

319:                                              ; preds = %312
  %320 = load i32, ptr %9, align 4
  %321 = load i32, ptr %8, align 4
  %322 = add nsw i32 %321, %320
  store i32 %322, ptr %8, align 4
  %323 = load i32, ptr %14, align 4
  %324 = load i32, ptr %7, align 4
  %325 = icmp slt i32 %323, %324
  br i1 %325, label %326, label %338

326:                                              ; preds = %319
  %327 = load i64, ptr %13, align 8
  %328 = load i32, ptr %14, align 4
  %329 = load i32, ptr %7, align 4
  %330 = call i32 @jpeg_fill_bit_buffer(ptr noundef %15, i64 noundef %327, i32 noundef %328, i32 noundef %329)
  %331 = icmp ne i32 %330, 0
  br i1 %331, label %333, label %332

332:                                              ; preds = %326
  store i32 0, ptr %3, align 4
  br label %528

333:                                              ; preds = %326
  %334 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 3
  %335 = load i64, ptr %334, align 8
  store i64 %335, ptr %13, align 8
  %336 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 4
  %337 = load i32, ptr %336, align 8
  store i32 %337, ptr %14, align 4
  br label %338

338:                                              ; preds = %333, %319
  %339 = load i64, ptr %13, align 8
  %340 = load i32, ptr %7, align 4
  %341 = load i32, ptr %14, align 4
  %342 = sub nsw i32 %341, %340
  store i32 %342, ptr %14, align 4
  %343 = zext i32 %342 to i64
  %344 = ashr i64 %339, %343
  %345 = trunc i64 %344 to i32
  %346 = load i32, ptr %7, align 4
  %347 = shl i32 1, %346
  %348 = sub nsw i32 %347, 1
  %349 = and i32 %345, %348
  store i32 %349, ptr %9, align 4
  %350 = load i32, ptr %9, align 4
  %351 = load i32, ptr %7, align 4
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds [16 x i32], ptr @extend_test, i64 0, i64 %352
  %354 = load i32, ptr %353, align 4
  %355 = icmp slt i32 %350, %354
  br i1 %355, label %356, label %363

356:                                              ; preds = %338
  %357 = load i32, ptr %9, align 4
  %358 = load i32, ptr %7, align 4
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds [16 x i32], ptr @extend_offset, i64 0, i64 %359
  %361 = load i32, ptr %360, align 4
  %362 = add nsw i32 %357, %361
  br label %365

363:                                              ; preds = %338
  %364 = load i32, ptr %9, align 4
  br label %365

365:                                              ; preds = %363, %356
  %366 = phi i32 [ %362, %356 ], [ %364, %363 ]
  store i32 %366, ptr %7, align 4
  %367 = load i32, ptr %7, align 4
  %368 = trunc i32 %367 to i16
  %369 = load ptr, ptr %12, align 8
  %370 = load i32, ptr %8, align 4
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds [0 x i32], ptr @jpeg_natural_order, i64 0, i64 %371
  %373 = load i32, ptr %372, align 4
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds [64 x i16], ptr %369, i64 0, i64 %374
  store i16 %368, ptr %375, align 2
  br label %383

376:                                              ; preds = %312
  %377 = load i32, ptr %9, align 4
  %378 = icmp ne i32 %377, 15
  br i1 %378, label %379, label %380

379:                                              ; preds = %376
  br label %387

380:                                              ; preds = %376
  %381 = load i32, ptr %8, align 4
  %382 = add nsw i32 %381, 15
  store i32 %382, ptr %8, align 4
  br label %383

383:                                              ; preds = %380, %365
  br label %384

384:                                              ; preds = %383
  %385 = load i32, ptr %8, align 4
  %386 = add nsw i32 %385, 1
  store i32 %386, ptr %8, align 4
  br label %251, !llvm.loop !20

387:                                              ; preds = %379, %251
  br label %493

388:                                              ; preds = %229
  br label %389

389:                                              ; preds = %388, %228
  store i32 1, ptr %8, align 4
  br label %390

390:                                              ; preds = %489, %389
  %391 = load i32, ptr %8, align 4
  %392 = icmp slt i32 %391, 64
  br i1 %392, label %393, label %492

393:                                              ; preds = %390
  %394 = load i32, ptr %14, align 4
  %395 = icmp slt i32 %394, 8
  br i1 %395, label %396, label %411

396:                                              ; preds = %393
  %397 = load i64, ptr %13, align 8
  %398 = load i32, ptr %14, align 4
  %399 = call i32 @jpeg_fill_bit_buffer(ptr noundef %15, i64 noundef %397, i32 noundef %398, i32 noundef 0)
  %400 = icmp ne i32 %399, 0
  br i1 %400, label %402, label %401

401:                                              ; preds = %396
  store i32 0, ptr %3, align 4
  br label %528

402:                                              ; preds = %396
  %403 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 3
  %404 = load i64, ptr %403, align 8
  store i64 %404, ptr %13, align 8
  %405 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 4
  %406 = load i32, ptr %405, align 8
  store i32 %406, ptr %14, align 4
  %407 = load i32, ptr %14, align 4
  %408 = icmp slt i32 %407, 8
  br i1 %408, label %409, label %410

409:                                              ; preds = %402
  store i32 1, ptr %24, align 4
  br label %438

410:                                              ; preds = %402
  br label %411

411:                                              ; preds = %410, %393
  %412 = load i64, ptr %13, align 8
  %413 = load i32, ptr %14, align 4
  %414 = sub nsw i32 %413, 8
  %415 = zext i32 %414 to i64
  %416 = ashr i64 %412, %415
  %417 = trunc i64 %416 to i32
  %418 = and i32 %417, 255
  store i32 %418, ptr %25, align 4
  %419 = load ptr, ptr %18, align 8
  %420 = getelementptr inbounds %struct.d_derived_tbl, ptr %419, i32 0, i32 4
  %421 = load i32, ptr %25, align 4
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds [256 x i32], ptr %420, i64 0, i64 %422
  %424 = load i32, ptr %423, align 4
  store i32 %424, ptr %24, align 4
  %425 = icmp ne i32 %424, 0
  br i1 %425, label %426, label %437

426:                                              ; preds = %411
  %427 = load i32, ptr %24, align 4
  %428 = load i32, ptr %14, align 4
  %429 = sub nsw i32 %428, %427
  store i32 %429, ptr %14, align 4
  %430 = load ptr, ptr %18, align 8
  %431 = getelementptr inbounds %struct.d_derived_tbl, ptr %430, i32 0, i32 5
  %432 = load i32, ptr %25, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds [256 x i8], ptr %431, i64 0, i64 %433
  %435 = load i8, ptr %434, align 1
  %436 = zext i8 %435 to i32
  store i32 %436, ptr %7, align 4
  br label %451

437:                                              ; preds = %411
  store i32 9, ptr %24, align 4
  br label %438

438:                                              ; preds = %437, %409
  %439 = load i64, ptr %13, align 8
  %440 = load i32, ptr %14, align 4
  %441 = load ptr, ptr %18, align 8
  %442 = load i32, ptr %24, align 4
  %443 = call i32 @jpeg_huff_decode(ptr noundef %15, i64 noundef %439, i32 noundef %440, ptr noundef %441, i32 noundef %442)
  store i32 %443, ptr %7, align 4
  %444 = icmp slt i32 %443, 0
  br i1 %444, label %445, label %446

445:                                              ; preds = %438
  store i32 0, ptr %3, align 4
  br label %528

446:                                              ; preds = %438
  %447 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 3
  %448 = load i64, ptr %447, align 8
  store i64 %448, ptr %13, align 8
  %449 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 4
  %450 = load i32, ptr %449, align 8
  store i32 %450, ptr %14, align 4
  br label %451

451:                                              ; preds = %446, %426
  %452 = load i32, ptr %7, align 4
  %453 = ashr i32 %452, 4
  store i32 %453, ptr %9, align 4
  %454 = load i32, ptr %7, align 4
  %455 = and i32 %454, 15
  store i32 %455, ptr %7, align 4
  %456 = load i32, ptr %7, align 4
  %457 = icmp ne i32 %456, 0
  br i1 %457, label %458, label %481

458:                                              ; preds = %451
  %459 = load i32, ptr %9, align 4
  %460 = load i32, ptr %8, align 4
  %461 = add nsw i32 %460, %459
  store i32 %461, ptr %8, align 4
  %462 = load i32, ptr %14, align 4
  %463 = load i32, ptr %7, align 4
  %464 = icmp slt i32 %462, %463
  br i1 %464, label %465, label %477

465:                                              ; preds = %458
  %466 = load i64, ptr %13, align 8
  %467 = load i32, ptr %14, align 4
  %468 = load i32, ptr %7, align 4
  %469 = call i32 @jpeg_fill_bit_buffer(ptr noundef %15, i64 noundef %466, i32 noundef %467, i32 noundef %468)
  %470 = icmp ne i32 %469, 0
  br i1 %470, label %472, label %471

471:                                              ; preds = %465
  store i32 0, ptr %3, align 4
  br label %528

472:                                              ; preds = %465
  %473 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 3
  %474 = load i64, ptr %473, align 8
  store i64 %474, ptr %13, align 8
  %475 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 4
  %476 = load i32, ptr %475, align 8
  store i32 %476, ptr %14, align 4
  br label %477

477:                                              ; preds = %472, %458
  %478 = load i32, ptr %7, align 4
  %479 = load i32, ptr %14, align 4
  %480 = sub nsw i32 %479, %478
  store i32 %480, ptr %14, align 4
  br label %488

481:                                              ; preds = %451
  %482 = load i32, ptr %9, align 4
  %483 = icmp ne i32 %482, 15
  br i1 %483, label %484, label %485

484:                                              ; preds = %481
  br label %492

485:                                              ; preds = %481
  %486 = load i32, ptr %8, align 4
  %487 = add nsw i32 %486, 15
  store i32 %487, ptr %8, align 4
  br label %488

488:                                              ; preds = %485, %477
  br label %489

489:                                              ; preds = %488
  %490 = load i32, ptr %8, align 4
  %491 = add nsw i32 %490, 1
  store i32 %491, ptr %8, align 4
  br label %390, !llvm.loop !21

492:                                              ; preds = %484, %390
  br label %493

493:                                              ; preds = %492, %387
  br label %494

494:                                              ; preds = %493
  %495 = load i32, ptr %10, align 4
  %496 = add nsw i32 %495, 1
  store i32 %496, ptr %10, align 4
  br label %78, !llvm.loop !22

497:                                              ; preds = %78
  %498 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 0
  %499 = load ptr, ptr %498, align 8
  %500 = load ptr, ptr %4, align 8
  %501 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %500, i32 0, i32 5
  %502 = load ptr, ptr %501, align 8
  %503 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %502, i32 0, i32 0
  store ptr %499, ptr %503, align 8
  %504 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 1
  %505 = load i64, ptr %504, align 8
  %506 = load ptr, ptr %4, align 8
  %507 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %506, i32 0, i32 5
  %508 = load ptr, ptr %507, align 8
  %509 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %508, i32 0, i32 1
  store i64 %505, ptr %509, align 8
  %510 = getelementptr inbounds %struct.bitread_working_state, ptr %15, i32 0, i32 2
  %511 = load i32, ptr %510, align 8
  %512 = load ptr, ptr %4, align 8
  %513 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %512, i32 0, i32 72
  store i32 %511, ptr %513, align 4
  %514 = load i64, ptr %13, align 8
  %515 = load ptr, ptr %6, align 8
  %516 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %515, i32 0, i32 1
  %517 = getelementptr inbounds %struct.bitread_perm_state, ptr %516, i32 0, i32 0
  store i64 %514, ptr %517, align 8
  %518 = load i32, ptr %14, align 4
  %519 = load ptr, ptr %6, align 8
  %520 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %519, i32 0, i32 1
  %521 = getelementptr inbounds %struct.bitread_perm_state, ptr %520, i32 0, i32 1
  store i32 %518, ptr %521, align 8
  %522 = load ptr, ptr %6, align 8
  %523 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %522, i32 0, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %523, ptr align 4 %16, i64 16, i1 false)
  %524 = load ptr, ptr %6, align 8
  %525 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %524, i32 0, i32 3
  %526 = load i32, ptr %525, align 8
  %527 = add i32 %526, -1
  store i32 %527, ptr %525, align 8
  store i32 1, ptr %3, align 4
  br label %528

528:                                              ; preds = %497, %471, %445, %401, %332, %306, %262, %188, %169, %125, %42
  %529 = load i32, ptr %3, align 4
  ret i32 %529
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @process_restart(ptr noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  store ptr %0, ptr %3, align 8
  %6 = load ptr, ptr %3, align 8
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %6, i32 0, i32 79
  %8 = load ptr, ptr %7, align 8
  store ptr %8, ptr %4, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.bitread_perm_state, ptr %10, i32 0, i32 1
  %12 = load i32, ptr %11, align 8
  %13 = sdiv i32 %12, 8
  %14 = load ptr, ptr %3, align 8
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %14, i32 0, i32 78
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %16, i32 0, i32 8
  %18 = load i32, ptr %17, align 4
  %19 = add i32 %18, %13
  store i32 %19, ptr %17, align 4
  %20 = load ptr, ptr %4, align 8
  %21 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %20, i32 0, i32 1
  %22 = getelementptr inbounds %struct.bitread_perm_state, ptr %21, i32 0, i32 1
  store i32 0, ptr %22, align 8
  %23 = load ptr, ptr %3, align 8
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %23, i32 0, i32 78
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %25, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr %3, align 8
  %29 = call i32 %27(ptr noundef %28)
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %32, label %31

31:                                               ; preds = %1
  store i32 0, ptr %2, align 4
  br label %58

32:                                               ; preds = %1
  store i32 0, ptr %5, align 4
  br label %33

33:                                               ; preds = %46, %32
  %34 = load i32, ptr %5, align 4
  %35 = load ptr, ptr %3, align 8
  %36 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %35, i32 0, i32 62
  %37 = load i32, ptr %36, align 8
  %38 = icmp slt i32 %34, %37
  br i1 %38, label %39, label %49

39:                                               ; preds = %33
  %40 = load ptr, ptr %4, align 8
  %41 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %40, i32 0, i32 2
  %42 = getelementptr inbounds %struct.savable_state, ptr %41, i32 0, i32 0
  %43 = load i32, ptr %5, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [4 x i32], ptr %42, i64 0, i64 %44
  store i32 0, ptr %45, align 4
  br label %46

46:                                               ; preds = %39
  %47 = load i32, ptr %5, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, ptr %5, align 4
  br label %33, !llvm.loop !23

49:                                               ; preds = %33
  %50 = load ptr, ptr %3, align 8
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %50, i32 0, i32 49
  %52 = load i32, ptr %51, align 8
  %53 = load ptr, ptr %4, align 8
  %54 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %53, i32 0, i32 3
  store i32 %52, ptr %54, align 8
  %55 = load ptr, ptr %4, align 8
  %56 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %55, i32 0, i32 1
  %57 = getelementptr inbounds %struct.bitread_perm_state, ptr %56, i32 0, i32 2
  store i32 0, ptr %57, align 4
  store i32 1, ptr %2, align 4
  br label %58

58:                                               ; preds = %49, %31
  %59 = load i32, ptr %2, align 4
  ret i32 %59
}

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

attributes #0 = { noinline nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nocallback nofree nounwind willreturn writeonly }
attributes #2 = { argmemonly nocallback nofree nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 15.0.7"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !7}
!12 = distinct !{!12, !7}
!13 = distinct !{!13, !7}
!14 = distinct !{!14, !7}
!15 = distinct !{!15, !7}
!16 = distinct !{!16, !7}
!17 = distinct !{!17, !7}
!18 = distinct !{!18, !7}
!19 = distinct !{!19, !7}
!20 = distinct !{!20, !7}
!21 = distinct !{!21, !7}
!22 = distinct !{!22, !7}
!23 = distinct !{!23, !7}
